## Переменные в языке Руби

Переменная — это область памяти в компьютере, куда мы можем сохранить значение во время исполнения программы. Возникает вопрос — а зачем его сохранять? А как раз для того, чтобы его потом изменить. В этом и заключается суть переменных — это ячейки памяти, куда мы можем что-то записать и, при желании, изменить.

Но не обязательно менять значения переменных, можно создавать переменные для удобства. Правда, в этом случае переменные часто называют константами — ведь они не меняются! Поэтому в современном языке JavaScript для создания переменных есть два ключевых слова: *let* для создания переменной, и *const* для создания константы. Но в руби все проще.

Попробуем «объявить» (создать, *define*, *declare*, *create*, *make*) простую переменную:

```ruby
puts "Your age?"
age = gets
puts "Your age is"
puts age
```

В программе выше мы спрашиваем возраст. После того, как возраст указан, программа выведет на экран ответ:

{line-numbers: false}
```
Your age?
20
Your age is
20
```

Возраст, который мы вводим сохраняется в переменную `age`. Мы бы могли назвать ее другим именем (например, `a`), но в этом случае и на четвертой строке пришлось бы писать "puts a". Существуют т.н. `naming conventions` — соглашения о наименовании — их достаточно просто найти: ввести в поисковой системе запрос «naming conventions variables ruby».

В языках программирования Ruby и JavaScript мы столкнемся с тремя основными naming conventions:

* Snake case (snake — змея), между словами ставится знак подчеркивания underscore (`_`). Переменные именуются следующим образом:

  > `client_age`
  > `user_password`
  > `user_password_expiration_date`
  
  Используется в руби, а также в базах данных.

* Camel case (camel — верблюд), слово начинается с маленькой буквы, слова разделяются с помощью больших букв:
  > `clientAge`
  > `userPassword`
  > `userPasswordExpirationDate` 
  Используется в JavaScript.

* Kebab case (kebab — шашлык), слова разделяются дефисом:
  > `client-age`
  > `user-password`
  > `user-password-expiration-date`
  Иногда используется в HTML, в т.н. data-атрибутах. Например:
>
>> `<input type="text" name="login" data-error-highlight-color="red">`

Пока запомним только первый вариант, для Ruby. Если переменная имеет длинное название, то слова разделяем нижним подчеркиванием. Нужно заметить, что чем короче названия переменных, тем лучше. Всегда нужно стремиться писать код так, чтобы названия переменных не были слишком длинными. Однако, для начинающих эта задача не всегда по силам. Придумать хорошее название для переменной не всегда просто, среди программистов ходит даже такая шутка:

> There are only two hard things in Computer Science: cache invalidation and naming things.
> Дословно: *существуют две сложные проблемы в Компьютерной Науке: инвалидация кеша и именование вещей*.

Если название переменной получается слишком длинным, не стоит его «искусственно» занижать (например, переименовав `client_password_expiration_date` в `cped`). Обычно это свидетельство того, что контекст решаемой проблемы слишком широкий, и пришла пора разбить функциональность на малозависимые друг от друга классы/объекты. Однако, это задача для другой книги. На данном этапе можете называть переменные так, как вам хочется.

Кроме `naming conventions` существуют правила: в руби переменные должны начинаться всегда с буквы, переменные могут содержать цифры и/или знак подчеркивания.  

X> ## Задание 
X> Написать программу, которая подряд спрашивает год рождения, место рождения, номер телефона трех клиентов, после чего выводит полученную информацию полностью в виде «карточек» (в англ.языке это бы называлось baseball card, аналогия в русском языке — карточка из картотеки). 

Так как придумать названия на первом этапе на английском языке может быть сложно (а для переменных желательно, но не обязательно использовать английский язык, а не транслит), приведем перевод. Год рождения — year of birth, место рождения — place of birth, телефонный номер — phone number. На будущее при возникновении вопросов об именовании переменных, рекомендуется заглянуть в словарь:

[Русско-английский и англо-русский словарь](https://www.multitran.ru/)
[Альтернативный словарь с контекстом](http://context.reverso.net/)
[Поиск синонимов англ.языка](http://www.thesaurus.com/)
[Переводчик на все случаи жизни](https://translate.google.com/)
