## Приведение типов (англ. converting types или type casting)

Давайте попробуем написать программу, которая считает, сколько вам месяцев. Мы будем вводить возраст человека, а программа будет считать этот возраст в месяцах. Учитывая то, что мы прошли в предыдущих главах, вырисовывается такой код:

{caption: "Предупреждение: некорректная программа для расчета возраста в месяцах", line-numbers: false}
```ruby
puts "Your age?"
age = gets
age_months = age * 12
puts "Your age is " + age_months
```

Выше мы объявили переменную *age_months*, в которую записываем значение переменной age, умноженное на 12. Сможете ли вы заметить, что в этой программе не так?

Результат работы программы:

{line-numbers: false}
```
Your age?
30
Your age is 30
30
30
30
30
30
30
30
30
30
30
30
```

О-оу! В программу закралась ошибка. Оказывается, что мы умножаем строку на число. Попробуйте запустить программу еще раз и ввести *blabla*:

{line-numbers: false}
```
Your age?
blabla
Your age is blabla
blabla
blabla
blabla
blabla
blabla
blabla
blabla
blabla
blabla
blabla
blabla
```

Переменная age имеет тип *String*. И когда мы умножаем *String* на *Integer*, мы получаем длинную строку, которую мы повторили с помощью нашей программы 12 раз. Чтобы программа работала правильно, нам нужно умножать *Integer* на *Integer* (число на число). Мы уже делали это, когда считали количество миллисекунд в сутках, тогда у нас все работало правильно. Чтобы программа работала правильно в этот раз, нужно, чтобы вместо *String* был тип *Integer*.

Что мы можем тут сделать? Если посмотреть документацию к функции (или методу, не забыли, что функция и метод — это синонимы?) *gets*, то мы увидим, что *gets* возвращает тип *String*. Оно и понятно, *gets* — это сокращение от «*get string*». Все, что нам нужно, — это функция «*get integer*»; если мы верим в принцип наименьшего сюрприза и предсказуемость языка Руби, то это будет «*geti*»:

{line-numbers: false}
```
$ irb
geti
NameError (undefined local variable or method `geti' for main:Object
Did you mean?  gets)
```

Упс! Не получилось. Но у нас была честная попытка. Такого метода не существует, но что-то нам подсказывает, что он может появиться в будущем. Будем думать дальше, как же нам исправить нашу программу.

В языке JavaScript (про который каждый Руби-программист должен немного думать) существует способ «превратить» строку в число путем умножения строки на единицу (node ниже — это интерпретатор JavaScript, работает, если у вас установлен Node.js):

{line-numbers: false}
```js
$ node
> "123" * 1
123
```

Получится ли это проделать в Руби?

{line-numbers: false}
```ruby
> "123" * 1
 => "123"
> ("123" * 1).class
 => String
```

Не получилось. Значит, должны быть другие способы. Открываем документацию класса *String* и видим целую серию методов, которые начинаются со слова «to» (от англ. convert to — конвертировать в...). Среди этих методов есть прекрасный метод «to_i», который означает «to Integer», «в число». Если бы мы записывали методы по-русски, то название было бы «в_ч». Не очень очевидно, но, видимо, программистам хотелось дать короткое название, ведь функция конвертации строки в число встречается довольно часто, и теперь мы имеем `to_i` вместо `to_integer`.

То есть для преобразования строки в число будем использовать функцию `to_i`:

{line-numbers: false}
```ruby
> "123".to_i
 => 123
> "123".to_i.class
 => Integer
```

Кстати, существует аналогичная функция у класса *Integer* для преобразования числа (и других типов) в строку: `to_s` (to string).

Попробуем переписать нашу программу для подсчета возраста в месяцах:

{caption: "Почти правильная программа для расчета возраста в месяцах"}
```ruby
puts "Your age?"
age = gets
age_months = age.to_i * 12
puts "Your age is " + age_months
```

Снова получаем ошибку, да что же это такое!

{line-numbers: false}
```
app.rb:4:in `+': no implicit conversion of Integer into String (TypeError)
```

В этот раз ошибка на четвертой строке. Но ошибка уже нам понятна — не можем преобразовать число в строку. То есть в четвертой строке мы складываем строку и число. Умножать строку на число можно, а складывать почему-то нельзя. Ну ничего страшного, попробуем сделать «*приведение типов*» еще раз:

{caption: "Правильная программа для расчета возраста в месяцах"}
```ruby
puts "Your age?"
age = gets
age_months = age.to_i * 12
puts "Your age is " + age_months.to_s
```

Попробуем запустить:

{line-numbers: false}
```
Your age?
30
Your age is 360
```

Заработало! Существует несколько других способов написать эту программу, и все они правильные. Например, можно «привести к типу Integer» на второй строке (третью оставить без изменений):

{line-numbers: false}
```ruby
puts "Your age?"
age = gets.to_i
age_months = age * 12
puts "Your age is " + age_months.to_s
```

Или можно переопределить значение переменной *age*, добавив одну строку:

{line-numbers: false}
```ruby
puts "Your age?"
age = gets
age = age.to_i
age_months = age * 12
puts "Your age is " + age_months.to_s
```

Или можно вообще обойтись без переменной *age_months*. Попробуйте написать такую программу самостоятельно.
