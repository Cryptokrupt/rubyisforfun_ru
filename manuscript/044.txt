## Обращение к массиву

До сих пор мы рассматривали итерацию по массиву. Но давайте посмотрим, как мы можем обратиться к определенному элементу массива. Обратиться, т.е. получить доступ — для чтения или записи — можно с помощью `индекса`. Индекс довольно хитрая штука, но в то же время очень простая. Это порядковый номер минус один, элементы массива считаются, начиная с нулевого, а не с первого. Т.е. если мы хотим обратиться к пятому элементу, нам нужен четвертый индекс. Попробуем создать массив строк на пять элементов в REPL:

{line-numbers: false}
```
> arr = %w(one two three four five)
=> ["one", "two", "three", "four", "five"]
```

Попробуем получить размер:

{line-numbers: false}
```
> arr.size
=> 5
```

Размер массива — 5. Т.е. в массиве пять элементов. Попробуем получить пятый элемент. Для того, чтобы его получить, нужно использовать четвертый индекс:

{line-numbers: false}
```
> arr[4]
=> "five"
```

Другими словами:

* `arr[0]` вернет `one`
* `arr[1]` вернет `two`
* `arr[2]` вернет `three`
* `arr[3]` вернет `four`
* `arr[4]` вернет `five`

Разумеется, когда мы умеем вычислять это выражение, мы можем его использовать совместно с другими функциями:

{line-numbers: false}
```ruby
puts arr[4]
```

Передавать в наш собственный метод:

{line-numbers: false}
```
my_own_method(arr[4])
```

И так далее. Т.е. делать все то же самое, что мы уже умеем делать с переменной. Например, можно присвоить какому-нибудь элементу массива другое значение:

{line-numbers: false}
```
arr[1] = 'двундель'
```

Например, программа:

{caption: "Заменить значение и перебрать массив"}
```ruby
arr = %w(one two three four five)
arr[1] = 'двундель'
arr.each do |word|
  puts word
end
```

Выведет на экран:

{line-numbers: false}
```
one
двундель
three
four
five
```

Мы могли бы записать эту программу иначе, это не было бы ошибкой (для небольшого числа элементов):

{caption: "Последовательно заменить значение и вывести элементы массива"}
```ruby
arr = %w(one two three four five)
arr[1] = 'двундель'
puts arr[0]
puts arr[1]
puts arr[2]
puts arr[3]
puts arr[4]
```
