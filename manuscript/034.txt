## Угадай число

Давайте закрепим наши знания на практике и напишем что-нибудь интересное, например программу «угадай число». Компьютер загадывает число, а пользователю нужно это число угадать. В дальнейшем улучшим эту программу:

{caption: "Игра «Угадай число», версия 1"}
```ruby
number = rand(1..10)
print 'Привет! Я загадал число от 1 до 10, попробуйте угадать: '

loop do
  input = gets.to_i

  if input == number
    puts 'Правильно!'
    exit
  end

  if input != number
    print 'Неправильно, попробуйте еще раз: '
  end
end
```

На этом этапе у вас должно быть достаточно знаний, для того чтобы понять что здесь происходит. Попробуйте догадаться, как работает эта программа. Результат работы программы:

{line-numbers: false}
```
Привет! Я загадал число от 1 до 10, попробуйте угадать: 2
Неправильно, попробуйте еще раз: 7
Неправильно, попробуйте еще раз: 8
Неправильно, попробуйте еще раз: 9
Неправильно, попробуйте еще раз: 10
Правильно!
```

Первая строка «загадывает» число и сохраняет значение в переменную `number`. Чуть ниже мы объявляем бесконечный цикл с помощью конструкции `loop do… end`. Сразу внутри «loop» мы объявляем переменную `input`, в которой сохраняем ввод пользователя.

Ввод пользователя имеет тип *Integer*, как и загаданное компьютером число. Поэтому в первом блоке мы «имеем право» произвести сравнение (в Руби не будет ошибки, если вы будете сравнивать переменные разных типов, просто они никогда не будут равны). Несмотря на то что цикл бесконечный, мы из него все равно выходим, но только при одном условии — когда угадали число. Это проверяется условием `input == number`.

Так как мы пока не умеем объявлять собственные методы (функции), то мы используем `exit` для того, чтобы выйти из программы. С более глубокими знаниями Руби мы бы могли, например, спросить пользователя, хочет ли он сыграть еще раз.

Следующий блок «*if*» содержит тест «если загаданное число НЕ равно вводу пользователя». Обратите внимание, что мы используем `print`, а не `puts`, т.к. `puts` переводит строку, а нам этого не надо (если это не понятно, попробуйте заменить `print` на `puts`).

В этой простой программе можно кое-что улучшить:

{caption: "Игра «Угадай число», версия 2"}
```ruby
number = rand(1..10)
print 'Привет! Я загадал число от 1 до 10, попробуйте угадать: '

loop do
  input = gets.to_i

  if input == number
    puts 'Правильно!'
    exit
  else
    print 'Неправильно, попробуйте еще раз: '
  end
end
```

Мы объединили два блока «*if*» в один с помощью ключевого слова «*else*» (иначе). В самом деле — зачем делать дополнительную проверку, если у нас всего два возможных варианта развития: или угадал число, или (иначе) не угадал.

X> ## Задание
X> Измените программу, чтобы она загадывала число от 1 до 1_000_000 (1 миллиона). Чтобы можно было угадать это число, программа должна сравнивать текущий ответ пользователя и искомое число: 1) если ответ пользователя больше, то программа должна выводить на экран «Искомое число меньше вашего ответа»; 2) иначе «Искомое число больше вашего ответа». Может показаться, что угадать это число невозможно, однако математический расчет показывает, что угадать число в этом случае можно не более, чем за 20 попыток.
