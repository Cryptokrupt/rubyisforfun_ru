## Англо-русский словарь

Для закрепления материала напишем простейшее приложение «Англо-русский словарь». Из самого названия приложения можно догадаться, какую структуру данных мы будем использовать, — хеш (который также называется `dictionary` — словарь).

Самое основное в словаре — база данных. Речь идет не о специализированной системе управления базами данных (СУБД) типа MySQL, Postgres, и т.д., а о базе данных в виде обычной структуры в памяти. Она может выглядеть следующим образом:

{line-numbers: false}
```ruby
dict = {
  'cat' => 'кошка',
  'dog' => 'собака',
  'girl' => 'девушка'
}
```

Авторы говорят «может выглядеть» из-за того, что они не настаивают на определенной точке зрения. Возможно, у вас будет какая-нибудь другая идея. Но в нашем случае подойдет простейшая структура данных ключ-значение (`key-value`), где ключом будет слово (тип *String*), а значением — перевод (тип *String*).

Эта структура данных позволяет легко искать вводимое пользователем слово в нашем словаре. Под словом «легко» подразумевается поиск с т.н. константным временем (`constant time`, O(1)). Другими словами, сколько бы слов мы не добавили в наш хеш, поиск всегда будет занимать одно и то же время. 

Если бы мы воспользовались структурой данных «массив», то задача тоже была бы решаема. Например, можно было бы определить нашу структуру данных следующим образом:

{line-numbers: false}
```ruby
arr = [
  { word: 'cat', translation: 'кошка' },
  { word: 'dog', translation: 'собака' },
  { word: 'girl', translation: 'девушка' }  
]
```

Но для поиска элемента нам необходимо перебрать весь массив (с помощью конструкции `each`). Если элементов будет много, то поиск будет занимать больше времени. Другими словами, с возрастанием размера массива возрастает и количество элементов, которое требуется просмотреть, чтобы найти слово. В этом случае говорят, что поиск будет занимать линейное время (`linear time`, O(N)).

Для небольшого количества элементов нет разницы, как именно мы будем реализовывать поиск. Более того, в новых версиях языка Руби хеш, который содержит не более 7 элементов, реализован через массив. Снаружи мы это никак не определим, т.к. программист всегда использует API языка и не лезет во внутренности. Но если посмотреть исходный код языка и реализацию на языке С, то эти подробности видны.

В любом случае, хеш нам больше подходит, даже если количество элементов небольшое. Когда мы используем хеш (или другую структуру данных), мы также показываем свое намерение другим программистам: «эта структура данных вот такая, а следовательно, я намереваюсь использовать ее правильным образом».

Конечно, если бы для каждого слова мы точно знали индекс, то поиск в массиве занимал бы константное время. Но пользователь не вводит индекс, он вводит слово. Поэтому и нужна структура данных «хеш». Поиск в хеше выполняется простой конструкцией:

{line-numbers: false}
```ruby
dict[input]
```

Вся программа выглядит довольно просто:

{line-numbers: false}
```ruby
dict = {
  'cat' => 'кошка',
  'dog' => 'собака',
  'girl' => 'девушка'
}

print 'Введите слово: '
input = gets.chomp

puts "Перевод слова: #{dict[input]}"
```

Результат работы программы:

{line-numbers: false}
```
Введите слово: dog
Перевод слова: собака
```

Заметьте, что у нас получился англо-русский словарь. Этот словарь невозможно использовать как русско-английский, потому что доступ к хешу всегда осуществляется по ключу. Нет способа, с помощью которого мы могли бы по значению (переводу) получить ключ (слово на английском языке). Единственный способ — создать еще один хеш, в этом случае ключом было бы русское слово, а значением — английское — и получился бы русско-английский словарь.

Константное O(1) и линейное O(N) время — это понятия о т.н. `Big-O` (большое O), понятие из Computer Science. Начинающему программисту нет необходимости знать абсолютно все структуры данных и сложные алгоритмы. Однако полезно задавать себе вопросы о теоретической скорости работы той или иной операции. Все популярные структуры данных сведены в единую таблицу, которую можно найти по [адресу](https://github.com/ro31337/bigoposter/blob/master/bigoposter.pdf).

Например, из таблицы видно, что в среднем (average) операция поиска в массиве занимает линейное O(N) время, а операция поиска в хеше — константное O(1):

{width: 80%}
![Плакат по информатике](images/065-poster.png)

X> ## Задание 1
X> Напишите «сложный» англо-русский словарь, где каждому английскому слову может соответствовать несколько переводов (например: cat — это «кот», «кошка»). 
>
X> ## Задание 2
X> Задайте базу данных (хеш) своих контактов. Для каждого контакта (фамилия) может быть задано три параметра: email, cell_phone (номер мобильного телефона), work_phone (номер рабочего телефона). Напишите программу, которая будет спрашивать фамилию и выводить на экран контактную информацию.

{width: 80%}
![Сравнительная таблица массивов и хешей](images/065-2-poster.png)
