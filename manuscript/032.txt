## Некоторые полезные функции языка руби

В предыдущих главах мы рассматривали программу:

{line-numbers: false}
```ruby
puts "Запускаем ракеты..."
5.downto(0) do |i|
  puts "Осталось #{i} секунд"
end
puts "Ба-бах!"
```

Однако, эта программа исполняется моментально, вывод на экран происходит мгновенно. Давайте исправим программу, чтобы в ней была настоящая задержка:

{line-numbers: false}
```ruby
puts "Запускаем ракеты..."
5.downto(1) do |i|
  puts "Осталось #{i} секунд"
  sleep 1
end
puts "Ба-бах!"
```

Т.е. «sleep» принимает параметр — количество секунд, которые программа должна «спать». Можно также задавать дробное значение. Например `0.5` для половины секунды (500 мсек).

В реальных программах «*sleep*» используется не часто — ведь программы должны исполняться как можно быстрее. Но иногда эта конструкция может использоваться при тестировании веб-приложений. Например «ввести логин, пароль, нажать на кнопку и подождать 10 секунд». Но и тут существует много мнений. Некоторые программисты утверждают, что если в тестах нужен «*sleep*», то тест написан неправильно. Но за многолетнюю практику автора, от «*sleep*» абсолютно во всех местах избавиться не удалось.

Любопытная деталь заключается в том, что в JavaScript не существует «*sleep*», т.к. этот язык является асинхронным по своей природе. Другими словами, нельзя приостановить программу. Несмотря на то, что для этого есть решение, это добавляет определенной сложности.

Если программа в JavaScript не может прерываться, то это справедливо не только для «*sleep*», а вообще для всего. Например, нужно прочитать в память большой файл. Но прерываться нельзя. На практике понятно, что чтение больших файлов занимает время. Поэтому в JavaScript было введено понятие `callback’ов` (обратных вызовов) и потом уже `Promises`.

{caption: "Пример неправильной программы на JavaScript", line-numbers: false}
```js
console.log('Запуск ракеты!');

setTimeout(function() {
  console.log('Прошла одна секунда, запускаем');
}, 1000);

console.log('Ба-бах!');
```

Вывод:

{line-numbers: false}
```
Запуск ракеты!
Ба-бах!
Прошла одна секунда, запускаем
```

Т.е. предупреждаем о запуске, ракета уже взорвалась, а через секунду мы ее хотим запустить. Непорядок! Поэтому в JavaScript следует мыслить асинхронно. Это несложно, и этот концепт понимается легко. Например, для правильного запуска ракеты нужно перенести последнюю строку внутрь `setTimeout`. Тогда все будет работать верно. Но в этом случае весь остальной код нам нужно будет писать с отступами и внутри `setTimeout`, ведь мы хотим сначала подождать, а потом делать все остальное. Если подождать 2 раза, то будет двойной уровень вложенности.

На помощь пришло ключевое слово «*await*», которое частично решает проблему. Но и в этом случае необходимо иметь в голове представление о том, как работает асинхронный код. JavaScript неплохой язык с декларативным уклоном. Если бы браузеры создавались сегодня, то этого языка бы не было. Но сейчас мы вынуждены работать с тем, что есть, история диктует свои правила.

Для руби-программиста язык JavaScript не является большой проблемой. Освоить JS в минимальном варианте, который необходим для работы, можно за относительно короткое время. Хорошая новость в том, что вместе с руби JavaScript используется только на клиентской части (т.е. в браузере пользователя, а не на сервере). Поэтому клиентские скрипты обычно небольшие. А если большие, то для этого часто нанимают отдельного front-end разработчика.

Из практики разработки авторы книги пришли к выводу, что человеку проще создавать программы не на асинхронных языках типа JavaScript, а на языках «обычных», синхронных: ruby, go, python и т.д. Несмотря на то, что ничего сложного в асинхронных языках нет, начинающим программистам бывает сложно понять асинхронные конструкции, не зная синхронных.
