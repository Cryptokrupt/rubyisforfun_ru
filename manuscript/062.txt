## Символы

Символы (`symbol`) в руби — почти то же самое, что и строки. Символы являются экземпляром (`instance`) класса *Symbol* (а все строки являются экземплярами класса *String*). Другими словами, символы представляет класс *Symbol*, а строки класс *String*. Записать символ очень просто:

{line-numbers: false}
```ruby
x = :something
``` 

Символы часто встречаются, когда одной и той же переменной в разных частях программы присваивается одинаковое по смыслу значение. Например:

{line-numbers: false}
```ruby
order.status = :confirmed
order.status = :cancelled
``` 

Символ `:confirmed` может встречаться в других частях программы. Но почему же используют символы — спросит читатель, ведь вместо символа всегда можно записать строку:

{line-numbers: false}
```ruby
order.status = 'confirmed'
order.status = 'cancelled'
``` 

Так и есть, можно было бы вообще обойтись без символов (и некоторые языки обходятся, например JavaScript). Но есть две причины по которым использование символов целесообразно.

Во-первых, символы являются неизменяемыми (`immutable`). Т.е. с ними нельзя выполнить «опасную» операцию, как например со строкой (типа `upcase!`). Другими словами, используя символ, вы показываете свое намерение: вот это значение всегда одинаково во всем приложении, и скорее всего существует ограниченный набор похожих значений.

Это примерно также, как и билет в театр. Можно каждой бумажке от руки написать «Сектор А», а можно сделать печать «Сектор А» и на определенных билетах ее ставить. Ведь поставить печать — занятие значительно менее ресурсоемкое, чем писать что-то от руки. Тем более каждую надпись нужно еще суметь разобрать, а вот печать универсальна, точно знаешь что это такое.

Во-вторых, т.к. символы `immutable`, то целесообразно их использовать повторно (`reuse`), вместо того, чтобы выделять каждый раз на них память. Скажем, если у вас есть строка `something` (9 байт) и вы определяете ее в 1000 разных частях приложения, то это уже как минимум 9000 байт (на самом деле больше). Если это символ, то из-за того, что символы в памяти не повторяются, будет использовано только 9 байт памяти. Если, конечно, вы объявите новый символ `something_else`, то он тоже займет память, но только однажды.

Выражаясь более техническим языком, ссылки на одинаковые символы всегда одинаковы. Ссылки на строки не всегда одинаковы — могут быть одинаковы, но не всегда. Например, создадим массив строк «хитрым способом» — когда для каждой операции создания вызывается блок, и из блока возвращается новая строка:

{line-numbers: false}
```ruby
arr = Array.new(100) { 'something' }
```

Будет создано 100 строк `something`, эти строки будут находиться в разных участках памяти, это будут разные объекты. В этом легко убедиться, идентификатор объектов будет разный:

{line-numbers: false}
```ruby
> arr[0].__id__
70100682145140
> arr[1].__id__
70100682144840
```

Но если создать массив символов точно таким же способом, то идентификатор объектов будет всегда одинаковым:

{line-numbers: false}
```ruby
$ pry
> arr = Array.new(100) { :something }
…
> arr[0].__id__
2893788
> arr[1].__id__
2893788
```

Другими словами, массив символов содержит ссылки на один и тот же объект.

Еще один положительный момент при использовании символов: символы сравниваются по ссылке. А ссылка это всего лишь значение вида 0xDEADBEEF, которое помещается в регистр компьютера (4-8 байт, в зависимости от архитектуры процессора и других настроек). 

Поэтому сравнить два символа — это операция сравнения двух указателей (ссылок). А операция сравнения двух строк реализована через побайтное сравнение, т.к. два разных объекта, находящихся в разных участках памяти (и следовательно с разными указателями на эти участки) могут быть равны, а могут и нет. Поэтому нужно сравнивать их до последнего байта.

Другими словами, сравнение двух символов занимает константное время (`constant time`, в компьютерной науке — computer science — обозначается как O(1)), а операция сравнения двух строк занимает линейное время (`linear time`, обозначается как O(N)).

Не будет большой ошибки, если вы всегда будете применять строки, программа будет работать. Но ради экономии памяти, ради небольшого выигрыша в быстродействии, и ради демонстрации другим программистам своих намерений стоит применять символы.

X> ## Задание
X> Напишите игру «камень, ножницы, бумага» (`[:rock, :scissors, :paper]`). Пользователь делает свой выбор и играет с компьютером. Начало игры может быть таким:

{line-numbers: false}
```ruby
print "(R)ock, (S)cissors, (P)aper?"
s = gets.strip.capitalize

if s == ...
```
