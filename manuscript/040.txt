## Однорукий бандит (слот-машина)

Для закрепления материала напишем на этот раз игру попроще: «Однорукий бандит». Положим деньги в банк, дернем виртуальную ручку и посмотрим на результат.

Прикинем наш план. За деньги в банке будет отвечать отдельная переменная «*balance*». В игре будут три места под игровые символы. Традиционными символами для слот-машин являются изображения фруктов, вишни, колокола и цифры `7`. В нашем случае это будут просто цифры от 0 до 5. Пусть переменные `x`, `y` и `z` будут представлять игровые символы. Значение этих переменных будет задаваться через генератор случайных чисел.

Определимся с понятием выигрыша и проигрыша. Пусть совпадение всех трех переменных что-то означает. Например:

* если все переменные равны нулю, баланс обнуляется;
* если все переменные равны 1, на счет добавляется 10 долларов;
* если все переменные равны 2, на счет добавляется 20 долларов;
* иначе со счета списывается 50 центов.

Программа должна работать до тех пор, пока на балансе есть деньги. Начнем с элементарной проверки возраста игрока:

{line-numbers: false}
```ruby
print 'Ваш возраст: '
age = gets.to_i
if age < 18
  puts 'Сожалеем, но вам нет 18'
  exit
end
```

Переменная `balance` будет хранить баланс в 20 долларов, плюс определим бесконечный цикл:

{line-numbers: false}
```ruby
balance = 20
loop do
  # ..
end
```

Внутри цикла стандартным способом ожидаем нажатия `Enter`:

{line-numbers: false}
```ruby
  puts 'Нажмите Enter, чтобы дернуть ручку...'
  gets
```

Зададим значения переменных `x`, `y` и `z`:

{line-numbers: false}
```ruby
  x = rand(0..5)
  y = rand(0..5)
  z = rand(0..5)
```

Выводим результат розыгрыша:

{line-numbers: false}
```ruby
  puts "Результат: #{x} #{y} #{z}"
```

Проверим первое условие «Если все переменные равны нулю, баланс обнуляется»:

{line-numbers: false}
```ruby
  if x == 0 && y == 0 && z == 0
    balance = 0
    puts 'Ваш баланс обнулен'
  end 
```

Проверим второе условие «Если все переменные равны 1, на счет добавляется 10 долларов» и объединим несколько условий в один блок `if` с помощью `elsif`:

{line-numbers: false}
```ruby
  elsif x == 1 && y == 1 && z == 1
    balance += 10
    puts 'Баланс увеличился на 10 долларов'
  end
```

Добавим третье — «Если все переменные равны 2, на счет добавляется 20 долларов» — и четвертое — «Иначе со счета списывается 50 центов» — условия. Вот как выглядит участок кода со всеми условиями:

{line-numbers: false}
```ruby
  if x == 0 && y == 0 && z == 0
    balance = 0
    puts 'Ваш баланс обнулен'
  elsif x == 1 && y == 1 && z == 1
    balance += 10
    puts 'Баланс увеличился на 10 долларов'
  elsif x == 2 && y == 2 && z == 2
    balance += 20
    puts 'Баланс увеличился на 20 долларов'
  else
    balance -= 0.5
    puts 'Баланс уменьшился на 50 центов'
  end
```

Под конец выведем результат на экран:

{line-numbers: false}
```ruby
  puts "Ваш баланс: #{balance} долларов"  
```

Код программы целиком:

{caption: "Программа игровых автоматов", line-numbers: false}
```ruby
print 'Ваш возраст: '
age = gets.to_i
if age < 18
  puts 'Сожалеем, но вам нет 18'
  exit
end

balance = 20
loop do
  puts 'Нажмите Enter, чтобы дернуть ручку...'
  gets
  
  x = rand(0..5)
  y = rand(0..5)
  z = rand(0..5)
  
  puts "Результат: #{x} #{y} #{z}"
  
  if x == 0 && y == 0 && z == 0
    balance = 0
    puts 'Ваш баланс обнулен'
  elsif x == 1 && y == 1 && z == 1
    balance += 10
    puts 'Баланс увеличился на 10 долларов'
  elsif x == 2 && y == 2 && z == 2
    balance += 20
    puts 'Баланс увеличился на 20 долларов'
  else
    balance -= 0.5
    puts 'Баланс уменьшился на 50 центов'
  end

  puts "Ваш баланс: #{balance} долларов"  
end
```

Результат работы программы:

{line-numbers: false}
```
Ваш возраст: 20
Нажмите Enter, чтобы дернуть ручку...

Результат: 1 2 4
Баланс уменьшился на 50 центов
Ваш баланс: 19.5 долларов
Нажмите Enter, чтобы дернуть ручку...

…

Результат: 1 1 1
Баланс увеличился на 10 долларов
Ваш баланс: 15.5 долларов
Нажмите Enter, чтобы дернуть ручку...
```

Программа работает, согласитесь, что в ней нет ничего сложного? С помощью полученных знаний мы можем составлять простейшие игры, расчеты, делать другие полезные приложения. Программы на Руби получаются небольшими, элегантными и, самое главное, понятными. Ведь это именно то, что делает программирование нескучным.

Когда мы изучим некоторые популярные структуры данных, узнаем, что такое классы и объекты, освоим работу с некоторыми инструментами — у нас будет минимальная теоретическая база, с помощью которой можно делать удивительные вещи. 

X> ## Задание 1 
X> Определите метод, который будет вычислять случайный номер с анимацией (используйте *sleep* со случайной задержкой). Примените [анимацию](https://goo.gl/hpk49x) к переменным `x`, `y`, `z`.
>
X> ## Задание 2
X> Добавьте больше условий в игру «Однорукий бандит», используйте свое воображение.
>
X> ## Задание 3 
X> (Если вы используете MacOS) вместо цифр в консоли используйте эмодзи. Пусть каждой цифре соответствует определенная картинка. Вы можете найти эмодзи на [сайте](https://emojipedia.org/).
