## Переменные экземпляра и локальные переменные

Внимательный читатель уже обратил внимание на странный префикс `@` перед именем переменной. В языке руби нельзя получить доступ к переменным, объявленным вне метода. Исключение составляют лишь переменные экземпляра класса (что такое «экземпляр» рассказывается позднее, пока можете представлять их как «почти глобальные»). Например, следующий код не будет исполнен и интерпретатор руби выдаст ошибку:

{caption: "Эта программа не работает", line-numbers: false}
```ruby
x = 123

def print_x
  puts x
end

print_x
```

Текст ошибки «undefined local variable or method `x` for main:Object (NameError)». Но что же такое `main`? Оказывается, любая программа в руби «оборачивается» в класс `main`. Это легко доказать, достаточно запустить вот такую программу:

{line-numbers: false}
```ruby
puts self
puts self.class
```

Вывод:

{line-numbers: false}
```
main
Object
```

Другими словами, это `top-level scope` в языке руби. Не стоит особо волноваться на этот счет до тех пор, пока вы не начнете изучать внутренние особенности языка. Но зная об этой особенности, становится проще понять почему метод не имеет доступ к переменной. Эта переменная не является локальной (local) для метода. Локальная — это любая переменная, объявленная внутри метода. К локальным переменным можно обратиться обычным способом:

{line-numbers: false}
```ruby
def calc_something
  x = 2 + 2
  puts x
end
```

Но для доступа к переменным экземпляра, они должны быть объявлены специальным образом: с помощью префикса `@`. Другими словами, мы можем переписать наш код с учетом этой особенности:

{caption: "Программа, которая сейчас работает (сравните с программой выше)", line-numbers: false}
```ruby
@x = 123

def print_x
  puts @x
end

print_x
```

Теперь метод `print_x` может получить доступ к этой переменной.

В *JavaScript* все немного иначе. Метод может «видеть» переменную, объявленную в своем «родительском» методе. Такая конструкция называется замыканием (`closure`):

{caption: "Программа JavaScript, которая работает", line-numbers: false}
```js
x = 123

function printX() {
  console.log(x);
}

printX();
``` 

Как вы уже могли заметить, в разных языках есть разные особенности. Эти особенности определены чаще всего природой языка программирования: для какой цели был создан тот или иной язык. *JavaScript* это событийный асинхронный язык и замыкания — простые функции, имеющие доступ к переменным, объявленным вне себя — очень удобны, когда возникают какие-либо события (например, пользователь щелкает на каком-либо элементе).