# Введение

## Вместо предисловия

В XXI веке программирование стало одной из важнейших наук в любой экономике. Процессы, которые происходили раньше без помощи компьютеров, были полностью или частично оптимизированы. Бизнес и простые люди увидели пользу электронных машин, и началась эпоха расцвета IT-индустрии.

Во всем многообразии технологий образовались отдельные направления. Определились наиболее удобные инструменты для выполнения той или иной задачи. Языки программирования претерпели существенные изменения. Разобраться во всех языках и технологиях обычному читателю не так просто, как это может показаться на первый взгляд.

В какой-то момент стало очевидно, что программист — одна из профессий XXI века. Но как стать программистом? В каком направлении приложить усилия? Что нужно изучать, а что не нужно? Как наиболее эффективно использовать время, чтобы освоить какую-либо технологию?

Прежде чем дать ответ на эти вопросы, нужно ответить на самый главный вопрос: а зачем нужно становиться программистом? Какой в этом смысл?

Кто-то захочет стать программистом, чтобы разрабатывать микропрограммы для межконтинентальных баллистических ракет и космической индустрии. Кто-то хочет стать программистом для того, чтобы создавать свои собственные игры. Кто-то хочет освоить программирование в электронных таблицах, чтобы эффективнее считать налоги.

Но задача именно этой книги более бытовая. Автор подразумевает, что читатель на вопрос «*зачем нужно становиться программистом?*» даст ответ «*чтобы быть программистом и зарабатывать деньги*». Обычно такой ответ дают люди, которые уже попробовали себя в какой-либо профессии и хотят более эффективно использовать свое время и получать за это деньги.

Также это могут быть молодые люди, которые вынуждены идти в ногу со временем и осваивать технологии как можно быстрее, и как можно быстрее получать результат от своих знаний. Причем результат не только в виде самих знаний — как написать ту или иную программу, а результат в денежном эквиваленте.

Знание какого-либо направления в программировании подразумевает знакомство с основами языка, с элементарной теорией (которая отличается для каждого направления), с основными понятиями и определениями, а также знакомство с неосновными инструментами (такими как операционная система, утилиты и дополнительные программы).

Направлений существует огромное множество. Это и разработка игр, и научные исследования, и обработка и анализ данных, и веб-программирование, и программирование для мобильных устройств, и т.д. Быть специалистом по всем направлениям сразу невозможно.

Поэтому человек, начинающий или желающий изучать программирование, стоит перед выбором: куда податься? что учить?

Если вы являетесь научным сотрудником НИИ, то выбор, скорее всего, падет на язык Python или C++, так как для этих языков накоплено большое количество библиотек для анализа и обработки данных.

Если вы, например, работаете сторожем и полностью довольны своей работой, то можно изучить какой-нибудь экзотический, маловостребованный на рынке язык программирования просто для того, чтобы не было скучно.

Если вы живете в обществе, где каждый месяц нужно оплачивать счета, которые становятся все больше и больше, где нужно думать не только про сегодня, но и про завтра, выбор уже будет другим. Нужно будет изучить что-нибудь быстро, очень востребованное, чтобы скорее найти работу.

Язык Руби (Ruby — англ.) и веб-программирование — это нечто среднее между «*поскорее найти работу*», «*выучить что-нибудь несложное и интересное*» и «*чтобы также пригодилось в будущем*». Руби не только позволяет составлять скучные программы, работая на кого-то в офисе, но также может быть полезен дома, в быту (одна из моих последних программ — обучение игре на гитаре).

Также философия самого языка подразумевает, что обучение и использование не будет скучным. К примеру, один из принципов языка — принцип наименьшего сюрприза (principle of a least surprise), который говорит буквально следующее: «*что бы вы ни делали — скорее всего, у вас получится*». Согласитесь, что это уже вдохновляет!

Существуют также и другие языки программирования. Автор ни в коем случае не утверждает, что они плохие. Каждый язык хорош для определенной задачи. Но вспомним про нашу задачу и сравним с некоторыми другими языками.