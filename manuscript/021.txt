# Часть 2. Основы

## Типы данных

Мы уже разобрались, что две строки можно складывать с помощью `+`. Также мы знаем, что строку можно умножить на число. С помощью этих экспериментов мы выяснили, что существует как минимум два типа данных: строка и число. Причем, само число, взятое в кавычки это строка. Давайте посмотрим на то, как руби понимает что такое число, а что такое строка:

```ruby
$ irb
> "blabla".class
 => String
> "123".class
 => String
> 123.class
 => Integer
```

Говорят, что все в руби — объект (Object). В результате любой операции получается объект. Каждый объект «*реализует метод*» `class`. Выражение «*реализует метод*» означает, что какой-то программист, разработчик языка руби, сделал специальную небольшую подпрограмму, которую мы с вами можем запускать, если знаем имя этой подпрограммы. Чтобы вызвать подпрограмму для какого-либо объекта, нужно ввести точку и написать имя этой подпрограммы.

В нашем случае имя этой подпрограммы (говорят «имя метода» или «имя функции», метод и функция — синонимы) это `class`. Кстати, не надо путать имя метода `class` с ключевым словом `class`, которое определяет т.н. класс — мы будем проходить это позднее. Если бы в реальной жизни у объектов были методы, то мы бы с вами могли увидеть следующее:

```
Яблоко.разрезать
Яблоко.количество_семян
Яблоко.количество_червей
Река.температура_воды
Река.количество_рыбы
```

И так далее. Так вот, в каждом объекте определен метод `class`:

```
Object.class
```

В нашем случае `123` (без кавычек) и `"blabla"` это объекты. Тип объекта `123` — *Integer* (целое число). Тип объекта `"blabla"` — *String* (строка). Тип любого объекта можно получить добавив в конце `.class`.

Конечно, для каждого объекта существует документация о том, какие методы поддерживаются. Настоятельно рекомендуется смотреть документацию для каждого типа с которым вы работаете. Пример документации для разных типов:

* [Object](https://ruby-doc.org/core-2.5.1/Object.html)
* [String](https://ruby-doc.org/core-2.5.1/String.html)
* [Integer](https://ruby-doc.org/core-2.5.1/Integer.html)

Документацию легко найти по поисковому запросу, например «*ruby object docs*» или «*ruby string docs*». В документации описано все, что мы можем делать с объектом. Это настоящая кладезь информации, документация должна стать вашим лучшим другом. Программист, который не поглядывает в официальную документацию по мере разработки и обучения, вряд ли добьется успеха. В документации указаны все возможные операции, которые можно выполнять с тем или иным объектом.

* [Пример документации к `Object.class`](https://ruby-doc.org/core-2.5.1/Object.html#method-i-class)
* [Пример умножения строки на число](https://ruby-doc.org/core-2.5.1/String.html#method-i-2A) — в документации дан любопытный пример умножения строки на ноль (возвращается пустая строка).

Существуют и другие типы данных, мы рассмотрим их в этой книге в следующих главах.

X> ## Упражнение 1
X> Узнайте какой тип данных у `""`. А какой тип данных у `0` (ноль)? Какой тип данных у минус единицы? Какой тип данных у округленного числа «Пи» `3.14`?

X> ## Упражнение 2
X> Известно, что метод `.class` для любого объекта возвращает результат. REPL читает (read), выполняет (evaluate) и печатает (print) этот результат на экран. Но если все в руби объект, то какого типа возвращается сам результат, когда мы пишем `.class`? Вот этот метод `.class` — результат какого типа он возвращает? Видно ли это из документации? Проверьте. Попробуйте написать `123.class.class` — первое выражение `123.class` вернет результат, а следующий `.class` вычислит тип этого результата.