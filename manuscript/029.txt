## Любопытные методы класса Integer

Методов для класса *Integer* не так много, и стоит посмотреть документацию, чтобы иметь понятие о том, что там вообще есть. На некоторых из них мы остановимся подробно.

`even?` и `odd?` — четный или нечетный

Мы можем проверить любое целое число на четность (делится ли оно на два без остатка) с помощью этих двух методов. Так как знак вопроса в конце метода встречается нам впервые, то остановимся на нем подробнее.

Знак вопроса в конце метода говорит лишь о том, что метод возвращает значение типа *Boolean* (в языке руби нет отдельного типа для *Boolean*, поэтому это либо *TrueClass* тип, либо *FalseClass* тип). Другими словами, значение либо true, либо *false*. Например, метод, который определяет, беременна ли девушка, можно записать только со знаком вопроса в конце, потому что результат или *true* (истина), или ложь (false). Часто такие методы начинаются со слова `is`:

{line-numbers: false}
```ruby
girl.is_little_bit_pregnant?
```

Знак вопроса опционален и остается на совести программиста. Когда мы научимся объявлять свои собственные методы, вы сможете создать метод со знаком вопроса или без него. Но правила хорошего тона говорят о том, что если результат или *true* или *false*, надо ставить знак вопроса. Посмотрим, как это работает на числах:

{line-numbers: false}
```ruby
$ irb
> 1.even?
false
> 1.odd?
true
> 2.even?
true
> 2.odd?
false
> 10 % 2 == 0 # наша собственная реализация even?
true
```

`upto` — вверх до, `downto` — вниз до

Эти методы принимают параметр, и вызывают блок определенное количество раз. До этого мы использовали *times*, который вел отсчет с нуля. Чтобы посчитать от нуля до `10` можно использовать или `times` или `upto`:

{line-numbers: false}
```
> 3.times { |i| puts "Я робот #{i}" }
Я робот 0
Я робот 1
Я робот 2
...
> 0.upto(2) { |i| puts "Я робот #{i}" }
Я робот 0
Я робот 1
Я робот 2
```

Вывод идентичный, но конструкция `upto` более гибкая. Можно задавать интервал «от» и «до». Например:

{line-numbers: false}
```
> 1000.upto(1002) { |i| puts "Я робот #{i}" }
Я робот 1000
Я робот 1001
Я робот 1002
```

Конструкция «downto» аналогичная, но отсчет ведется в обратную сторону:

{line-numbers: false}
```ruby
puts "Запускаем ракеты..."
5.downto(1) { |i| puts "Осталось #{i} секунд" }
puts "Ба-бах!"
```

Результат работы программы:

{line-numbers: false}
```
$ ruby app.rb
Запускаем ракеты...
Осталось 5 секунд
Осталось 4 секунд
Осталось 3 секунд
Осталось 2 секунд
Осталось 1 секунд
Ба-бах!
```

Разумеется, блок можно написать с помощью `do...end`, результат от этого не изменится:

{line-numbers: false}
```ruby
puts "Запускаем ракеты..."
5.downto(0) do |i|
  puts "Осталось #{i} секунд"
end
puts "Ба-бах!"
```

X> ## Задание 1
X> Вывести на экран числа от 50 до 100.
>
X> ## Задание 2
X> Вывести на экран числа от 50 до 100, и если число четное - рядом с ним написать `true`, если нечетное — `false`.
>
X> ## Задание 3
X> Вы создаете веб-сайт для барбер-шопа. Выведите на экран все виды текстурного крема для волос. Каждый вид крема имеет два параметра, SHINE (блеск) и HOLD (стойкость). Каждый параметр представлен цифрой от 1 до 5.

Подсказка: используйте цикл двойной вложенности. Ожидаемый результат:

{line-numbers: false}
```
SHINE 1 HOLD 1
SHINE 1 HOLD 2
SHINE 1 HOLD 3
SHINE 1 HOLD 4
SHINE 1 HOLD 5
SHINE 2 HOLD 1
SHINE 2 HOLD 2
...
```