## Метод empty?

Знак вопроса на конце метода означает, что метод будет возвращать значение типа *Boolean* (`true` или `false`). Метод `empty?` используется для того, чтобы убедиться в том, что массив не пустой (или пустой). Если массив пустой (`empty`), то `empty?` возвращает `true`:

{line-numbers: false}
```ruby
$ pry
> [].empty?
 => true
```

Важный момент заключается в том, что объект `nil` не реализует метод `empty?`. То есть если вы не уверены, что какой-то метод возвращает массив, необходимо сделать проверку на `nil`:

{line-numbers: false}
```ruby
arr = some_method

if !arr.nil? && !arr.empty?
  puts arr.inspect
end
```

Существует одна важная деталь. Так как любой руби-программист почти со 100%-ной вероятностью будет работать с Rails, нужно знать, что проверка коллекции (в т.ч. массива) в Rails выполняется иначе. То есть если вы оставите этот синтаксис, то ошибки не будет, просто есть более эффективный способ:

{line-numbers: false}
```ruby
if !arr.blank?
  puts arr.inspect
end
```

Или используя прямо противоположный метод `present?`:

{line-numbers: false}
```ruby
if arr.present?
  puts arr.inspect
end
```

Другими словами, когда фреймворка Rails нет, используем `empty?`, а когда работаем над rails-приложением, всегда используем `blank?` и `present?`. Эти методы реализованы для многих типов, и при наличии вопросов в будущем рекомендуется обращаться к этой таблице:

{width: 100%}
![Методы blank? и present? для разных типов](images/051-rails-blank-present.png)

[Источник](https://stackoverflow.com/a/20663389/337085)

Таблица выше очень важная, стоит сделать особую заметку в книге. Как видно, методы `blank?` и `present?` совершенно противоположные (последний и предпоследний столбцы). А из второго столбца следует, что только `nil` и `false` вычисляются в `false`. Другими словами, все конструкции ниже вычисляются в `true` и нет необходимости делать проверку (с помощью `==`, если мы хотим получить тип *Boolean*):

{line-numbers: false}
```ruby
if true
  # будет выполнено
end

if ''
  # будет выполнено
end

if ' '
  # будет выполнено
end

if []
  # будет выполнено
end

# ...
```

И так далее.

Также из таблицы видно, что метод `empty?` реализован для типов *String*, *Array*, *Hash*.
