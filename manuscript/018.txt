## Первая программа

На самом деле нашей первой программой была программа сложения двух чисел: `puts 1+1`. Давайте создадим новый файл с именем app.rb и запишем в него следующий код:

{caption: "Ваша первая программа"}
```ruby
puts "I would hug you, but I’m just a text"
```

Когда файл создан и сохранен, из терминала можно запустить программу:

```
$ ruby app.rb
I would hug you, but I’m just a text
```

В файл-менеджере тоже можно ввести `ruby app.rb`. Но что такое, если запустить программу через файл-менеджер, то все пропадёт! Тонкость в том, что программа запускается, «отрабатывает» и управление переходит обратно — в терминал или в нашем случае в файловый менеджер. Поэтому чтобы посмотреть «что же там было» после того, как мы нажали Enter, надо нажать *Ctrl+O*.

Ура! У нас получилась первая осмысленная программа. Давайте её немного улучшим:

{caption: "Выведите текст и дождитесь клавиши Enter"}
```ruby
puts "I would hug you, but I’m just a text"
gets
```

Теперь мы выводим на экран строку и вместо того, чтобы выходить из программы — ожидаем ввода. Но не просто ввода, а ввода строки. Инструкция `gets` это по сути `get string` — получить строку. Вот мы и пробуем получить строку. Заметьте, что строка может состоять из множества символов, поэтому руби понимает окончание строки только в том случае, если вы нажмете Enter. Разумеется, можно просто нажать Enter, тогда строка будет пустая (если честно, то не совсем, но будет «казаться», что она пустая).

Запустите программу выше и попробуйте нажать Enter. Если вы запускаете программу из файл-менеджера, то результат не «пропадет» и программа будет ждать вашего ввода.

Давайте составим простейшую программу для изучения иностранного языка. Возьмем три слова: ball, door, peace. Представим, что нам нужно выучить эти слова. Мы напишем программу, которая будет спрашивать — «Как переводится слово peace?». В этот момент подразумевается, что пользователь должен дать ответ вслух: мяч, дверь, мир. Т.к. с остальными операторами языка мы не знакомы, то обойдемся тем, что есть:

{caption: "Программа обучения иностранному языку"}
```ruby
puts "How to translate ball?"
gets
puts "How to translate door?"
gets
puts "How to translate peace?"
gets
```

Попробуем запустить — работает! Это не очень удобное, но рабочее и полезное приложение. Оно не выводит ответы, но уже задает вопросы. Другими словами, с помощью двух операторов `put` и `gets` мы смогли написать что-то интересное. Что же будет дальше! Для играющих на гитаре предлагаем программу для изучения нот на первой струне:

{caption: "Программа обучения игре на гитаре"}
```ruby
puts "Say a note on a 0 fret?" # Ответ E
gets
puts "Say a note on a 1st fret?" # Ответ F
gets
puts "Say a note on a 2nd fret?" # Ответ F#
gets
puts "Say a note on a 3rd fret?" # G
gets
# ...
```

И так далее, до 12 лада (E F F# G G# A A# B C C# D D# E). Напишите программу самостоятельно. Если тема музыки вам не интересна, сделайте программу для изучения 10 слов.

По поводу листинга выше можно сделать несколько замечаний. Во-первых, вы наверное уже заметили, что после строки можно оставить любой комментарий, достаточно ввести `#` (решётка, `hash`, иногда говорят `pound sign`). Можно оставлять комментарий и на новой строке. Можно оставлять сколько угодно комментариев и пустых строк, на работу программы это не влияет.

X> ## Упражнение 1
X> Попробуйте оставить комментарии к своей программе и добавить пустые строки после gets, чтобы визуально программа выглядела «легче».

Второе замечание — поддержка русского языка, а точнее правильной кодировки. В ОС Windows скорее всего возникнут проблемы с русской кодировкой. Это одна из причин почему не стоит использовать Windows и нужно переходить на MacOS или Linux — на этих операционных системах проблем с кодировкой нет. К счастью, проблема кодировки очень просто исправляется, если в самое начало файла добавить:

```
# encoding: cp866
```

Разумеется, файл должен быть тоже сохранен в этой кодировке в текстовом редакторе. Другими словами, мы «дружим» руби и текстовый редактор. Интерпретатору руби говорим в какой кодировке будет этот файл, а в редакторе выбираем эту самую кодировку CP866 (также она может называться DOS кодировкой). После этого можно писать по-русски.

В «нормальных» операционных системах этих трюков проделывать не нужно. Если можете, переключайтесь на них как можно скорее. В дальнейшем таких сложных трюков быть не должно, но помните — если что-то не получается, то ошибка может заключаться в том, что вы используете неправильную операционную систему. Несмотря на то, что руби должен без проблем работать в Windows, для этой операционной системы он не предназначался. А авторы популярных библиотек не тестируют свои программы на Windows.

X> ## Упражнение 2
X> Если у вас установлена ОС Windows, попробуйте скачать VMWare Workstation (платная программа) или [VirtualBox](https://www.virtualbox.org/) (бесплатная). Это виртуальная машина — программа для запуска операционных систем внутри вашей ОС. Попробуйте запустить виртуальную машину и установить в ней [Linux Mint Cinnamon edition](https://linuxmint.com/download.php). Попробуйте написать первую программу в Linux! Если не получится — ничего страшного, продолжайте обучение дальше, можно будет вернуться к этому позднее.
