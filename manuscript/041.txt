## Массивы

Массив (`array`) — это просто какой-то набор данных. Например, массив имен жильцов, проживающих в подъезде. Или массив чисел, где каждое число может иметь какое-то значение (например, зарплата сотрудника). Или массив объектов — работники предприятия, где у каждого работника могут быть указаны зарплата, возраст, имя.

Причем в Руби данные в массиве не обязательно должны быть одного типа. То есть массив — это такая корзина, куда мы можем запихать яблоки, груши, какие-то цифровые записи и парочку пароходов. Но обычно массивы однородны, т.е. все `item’ы` (предметы, элементы) имеют одинаковый тип.

Возникает вопрос: а зачем нам использовать массивы? Зачем нам может потребоваться помещать что-то в массив? Ответ довольно простой: массивы удобны тем, что они представляют какой-то набор данных и с этими данными можно производить какие-то действия. Допустим, у нас есть массив посещенных городов:

{line-numbers: false}
```ruby
arr = ['Сан-Франциско', 'Москва', 'Лондон', 'Нью-Йорк']
``` 

Мы объявили массив, одновременно поместив в него 4 элемента типа `String`. Руби знает, что это массив, потому что мы использовали квадратные скобки для его объявления. С этим массивом мы можем проделать большое количество различных полезных операций. Например, получить количество элементов (посещенных городов):

{line-numbers: false}
```
$ irb
...
> arr.size
=> 4
```

Или отсортировать массив в алфавитном порядке:

{line-numbers: false}
```
$ irb
...
> arr.sort
=> ["Лондон", "Москва", "Нью-Йорк", "Сан-Франциско"]
```

Можем сделать `итерацию` (проход) по каждому элементу массива:

{line-numbers: false}
```ruby 
arr = ['Сан-Франциско', 'Москва', 'Лондон', 'Нью-Йорк']
arr.each do |word|
  puts "В слове #{word} #{word.size} букв"
end
```

Результат работы программы:

{line-numbers: false}
```
В слове Сан-Франциско 13 букв
В слове Москва 6 букв
В слове Лондон 6 букв
В слове Нью-Йорк 8 букв
```

Конечно, ничто не мешает нам объявить пустой массив:

{line-numbers: false}
```
arr = []
```

Но зачем он нужен? Затем же, зачем нужна пустая корзина, что-нибудь туда положить. Положить `объект` (все в Руби — объект) в массив можно несколькими способами, обычно используется два основных:

* `arr.push(123)` — метод push также реализован в языке `JavaScript`, поэтому многие веб-программисты предпочитают использовать его.
* `arr << 123` — с помощью «двойной стрелки», которая как бы говорит «положить туда».

Например, простейшая программа «записная книжка» могла бы выглядеть так:

```ruby 
arr = []

loop do
  print 'Введите имя и телефон человека (Enter для окончания ввода): '
  entry = gets.chomp
  break if entry.empty?
  arr << entry
end

puts 'Ваша записная книжка:'

arr.each do |element|
  puts element
end
```

Результат работы программы:

{line-numbers: false}
```
Введите имя и телефон человека (Enter для окончания ввода): Геннадий 12345
Введите имя и телефон человека (Enter для окончания ввода): Мама (555) 111-22-33
Введите имя и телефон человека (Enter для окончания ввода): Любимая (555) 12345
Введите имя и телефон человека (Enter для окончания ввода): Любимая 2 (555) 98765
Введите имя и телефон человека (Enter для окончания ввода):
Ваша записная книжка:
Геннадий 12345
Мама (555) 111-22-33
Любимая (555) 12345
Любимая 2 (555) 98765
```

Конечно, наша записная книжка пока имеет минимальный функционал. Когда программа завершается, данные не сохраняются на диск. Нет поиска по имени и номеру телефона. Но зато мы уже умеем кое-что делать с массивами. А отсортировать записи и поиск в записной книжке будет удобнее!
