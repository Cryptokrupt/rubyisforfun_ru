## Установка gem’ов

Все наши операции в REPL до текущего момента были не самыми сложными. Однако, в случае с двумерными массивами мы уже могли наблюдать потерю наглядности. Например, создание массива для игры в «Морской бой» выглядит следующим образом:

{line-numbers: false}
```ruby
$ irb
> Array.new(10) { Array.new(10) }
 => [[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil]]
```

Синтаксис верный, но как понять где пятая строка и второй столбец? Приходится вглядываться в «простыню» этих значений. Разработчики языка руби знали, что нельзя написать инструмент, который понравится всем. И вместо того, чтобы завязывать разработчика на фиксированный набор инструментов, было решено добавить возможность расширять экосистему языка таким образом, чтобы каждый человек мог написать (или дописать) что-то свое.

Разработчики со всего мира воспользовались этой возможностью и для языка руби было создано множество `gem’ов` (`gem`, читается как «джем» — драгоценный камень, жемчужина, что перекликается с названием «руби» — рубин). В других языках `gem’ы` называются библиотеками (`library`) или пакетами (`packets`). Например, альтернатива команде «gem» в Node.js команда `npm` — сокращение от *Node Packet Manager* (менеджер пакетов *Node*).

Слово `gem` звучит поинтереснее, чем просто «пакет». Но смысл один и тот же — просто какая-то программа, или программный код, который очень просто скачать или использовать, если знаешь имя `gem’a`. Для установки `gem’а` используется команда `gem`, которая является частью пакета языка руби (также как и `irb` и `ruby`). 

Давайте попробуем установить какой-нибудь gem:

{line-numbers: false}
```
$ gem install cowsay
```
«Cowsay» это «cow say» («корова скажи»). Это не очень популярный `gem`, который был создан обычным энтузиастом. Этот `gem` добавляет в ваш `shell` команду `cowsay`, которая принимает аргумент и выводит на экран корову, которая что-то говорит:

{line-numbers: false}
```
$ cowsay 'Привет, Вася!'
 _______________
| Привет, Вася! |
 ---------------
      \   ^__^
       \  (oo)\_______
          (__)\       )\/\
              ||----w |
              ||     ||
```

Существует огромное количество `gem’ов` на все случаи жизни. К слову, этим и славится язык руби (а также *JavaScript*). Для любой задачи, которая придет вам в голову наверняка существует какой-то `gem` (или пакет для *JavaScript*).

Не обязательно `gem` должен добавлять какую-то команду. Часто бывает так, что `gem` предоставляет только определенный код, который вы можете использовать в своей программе, применив ключевое слово `require` (с параметром — обычно именем gem’а).

Для дальнейшего обучения нам потребуется установить наш первый (уже второй) gem, который является довольно популярным и практически стал стандартом в экосистеме руби (такое часто случается, независимые разработчики создают инструмент, который всем нравится и этот инструмент становится стандартом). Название `gem’а`, который мы будем устанавливать — `pry` (читается как «прай»). Страница [`gem’a`](https://github.com/pry/pry) на GitHub. Зайдите, чтобы взглянуть на документацию. Что же такое `pry`?

Вот что говорит нам GitHub: «An IRB alternative and runtime developer console». Другими словами, альтернатива уже известному нам REPL — IRB. Если раньше мы вводили команду `irb`, то теперь будем вводить команду `pry`. Давайте же поскорее установим этот `gem` и посмотрим, чем он лучше:

{line-numbers: false}
```
$ gem install pry
...
$ pry
>
``` 

Во-первых, если мы введем определение нашего массива в `pry`, то значения будут подкрашены (чего нет в `irb`):

{line-numbers: false}
```ruby
$ pry
> arr = [[0, 0, 1], [nil, 0, nil], [1, nil, 1]]
...
``` 

Цифры подкрашиваются синим цветом, а `nil` — голубым. Казалось бы — ну и что? Это кажется незаметной деталью, но при работе с большим объемом данных визуальное облегчение информации — большое подспорье! Представьте количество дней, которое вы в будущем проведете за компьютером и представьте, что теперь они будут немного лучше.

Второй важный момент в `pry` — конфигурация. Причем, получается довольно любопытно. `Gem` это, грубо говоря, плагин для языка (или экосистемы — как будет угодно) руби. Но и для «плагина» `pry` существует свое множество плагинов, один из которых мы собираемся установить. Это плагин для «улучшенного» (более понятного) вывода информации на экран.

`Gem` называется «awesome print». `Gem` содержит в себе библиотеку кода, плагин для `pry`, плагин для `irb` (нам не потребуется, т.к. в будущем будем использовать только `pry`). Страница [`gem’a`](https://github.com/awesome-print/awesome_print) на GitHub. Пройдите по ссылке, чтобы ознакомиться с документацией и понять, что делает `awesome print`. Если ничего непонятно, то ничего страшного, сейчас разберемся. Давайте установим `awesome print`:

{line-numbers: false}
```
gem install awesome_print
```

Сам по себе `gem` не создает никаких команд. Поэтому давайте подключим его к `pry`. Как это сделать описано в документации. Мы сделаем это вместе:

{caption: "Как вы прикрепляете «awesome_print» к «pry»"}
```sh
$ cat > ~/.pryrc
require 'awesome_print'
AwesomePrint.pry!
^D
```

Т.е. запускаем в терминале команду `cat`, которая считывает из стандартного ввода следующие две строки (мы должны их ввести с клавиатуры). В конце мы нажимаем `Ctrl+D` — комбинацию, которая говорит о том, что ввод закончен (в листинге выше это обозначается как `^D`). Возникает вопрос — а откуда взялись эти две строки и что они означают? Эти две строки взялись из документации, а именно из раздела «PRY Integration» `readme` репозитория гитхаба. Строки означают что-то, но на самом деле пока это неважно, читайте их как «подключение awesome print к pry».

Гем `awesome_print` подключается к `pry` только один раз на вашем компьютере.

Теперь запустим `pry` и введем массив, который мы использовали для крестиков-ноликов:

{line-numbers: false}
```
$ pry
> arr = [[0, 0, 1], [nil, 0, nil], [1, nil, 1]]
[
    [0] [
        [0] 0,
        [1] 0,
        [2] 1
    ],
    [1] [
        [0] nil,
        [1] 0,
        [2] nil
    ],
    [2] [
        [0] 1,
        [1] nil,
        [2] 1
    ]
]
```

Должно получиться вот так: 

{width: 80%}
![](images/017-objects-in-ruby.png)

Вау! Вывод не только лучше, но и раскрашен в разные цвета! Наша связка `pry` с `awesome print` подкрашивает вывод, улучшает визуальную структуру и даже показывает нам индексы, чтобы мы легче могли добраться до нужного элемента!  Сравните этот вывод со стандартным выводом IRB:

{line-numbers: false}
```
$ irb
> arr = [[0, 0, 1], [nil, 0, nil], [1, nil, 1]]
 => [[0, 0, 1], [nil, 0, nil], [1, nil, 1]]
```

Примечание: одна из основных функциональностей `pry` это отладка программ. Мы займемся этим позже.

X> ## Задание: 
X> Попробуйте в `pry` вывести поле 10 на 10 для игры в «Морской бой».
