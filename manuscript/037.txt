## Методы

Методы (или функции, реже — подпрограммы) — это небольшие участки программы, которые можно использовать повторно. До сих пор мы не использовали написанный код повторно (за исключением случаев, когда он находился внутри, например `loop`), но методы позволяют существенно упростить вашу программу, разбив ее на несколько логических блоков.

Методы не обязательно «должны» сделать программу меньше в размере. Основная задача — выделить какие-то логические блоки и сделать программу более читаемой для человека.  Часто такой процесс называется *рефакторингом* (а эта техника рефакторинга — «*extract method*», выделить метод): есть большая программа, и вот эта часть делает определенную функциональность, которую можно выделить отдельно, давайте ее выделим. В результате рефакторинга большой участок программы разбивается на два маленьких.

Но методы можно писать и просто для удобства. Чуть выше мы использовали такую конструкцию:

{line-numbers: false}
```ruby
age = gets.to_i
```

Назначение этого кода в том, чтобы считать ввод пользователя и сконвертировать *String* в *Integer* (с помощью `to_i`). Конструкция не очень понятна тем, кто смотрит на код впервые. Чтобы она стала более понятной, сделаем рефакторинг и выделим метод:

```ruby
def get_number
  gets.to_i
end

age = get_number
```

С помощью `def...end` мы «объявили» метод. Теперь мы можем смело писать `age = get_number`, с точки зрения программиста это выглядит более понятно, особенно когда речь идет про несколько переменных:

{line-numbers: false}
```ruby
age = get_number
salary = get_number
rockets = get_number
```

Методы в Руби всегда возвращают значение, даже если кажется, что они его не возвращают. Результат выполнения последней строки метода (в примере выше она же и первая) — это и есть возвращаемое значение. Если мы по какой-то причине хотим вернуть значение в середине метода (и прекратить дальнейшее выполнение), мы можем использовать ключевое слово `return`:

```ruby
def check_if_world_is_crazy?
  if 2 + 2 == 4
    return false
  end

  puts "Jesus, I can't believe that"
  true
end
```

Последнюю строку можно записать как «*return true*», но это необязательно. Метод, как и любой блок, может содержать несколько строк подряд. Также метод может принимать параметры:

```ruby
def get_number(what)
  print "Введите #{what}: "
  gets.to_i
end

age = get_number('возраст')
salary = get_number('зарплату')
rockets = get_number('количество ракет для запуска')
```

Результат работы программы:

{line-numbers: false}
```
Введите возраст: 10
Введите зарплату: 3000
Введите количество ракет для запуска: 5
```

Согласитесь, что программа выше выглядит намного проще, чем она могла бы выглядеть без метода `get_number`:

{line-numbers: false}
```ruby
print 'Введите возраст:'
age = gets.to_i
print 'Введите зарплату:'
salary = gets.to_i
print 'Введите количество ракет для запуска:'
rockets = gets.to_i
```

Более того, представьте, что мы решили задать вопрос немного иначе: «Введите, пожалуйста» вместо «Введите». В случае с методом нам нужно сделать исправление только в одном месте. А если программа не разделена на логические блоки и «идет сплошной простынёй», исправления надо сделать сразу в трех местах.

Начинающему может показаться, что это совсем незначительные улучшения. Однако на практике следует выполнять рефакторинг постоянно. Когда код хорошо организован, писать программы — одно удовольствие! К сожалению, организация кода — не такая простая задача, как может показаться на первый взгляд. Существует много техник рефакторинга, шаблонов проектирования и т.д. Но главное, конечно, желание программиста поддерживать порядок.

X> ## Задание
X> Напишите метод, который выводит на экран пароль, но в виде звездочек. Например, если пароль `secret`, метод должен вывести «Ваш пароль: ******».
