## Bang!

Есть одна любопытная деталь в языке Руби, на которой стоит остановиться отдельно, — это *bang*, *exclamation mark*, восклицательный знак или просто `!` в конце какого-либо метода. Рассмотрим программу (некоторые фразы в программе могут быть на русском языке, который по умолчанию плохо поддерживается в Windows, мы еще раз рекомендуем вам переходить на Linux Mint Cinnamon или MacOS):

```ruby
x = 'Я МОЛОДЕЦ'
x = x.downcase
puts x
```

Вывод программы:

{line-numbers: false}
```
$ ruby app.rb
я молодец
```

Мы объявили переменную и присвоили ей значение «Я МОЛОДЕЦ», заглавными буквами. На второй строчке мы переопределили переменную, присвоив ей значение `x.downcase`. Так как переменная `x` имеет тип *String* (тип «строка», этот тип приобретают все переменные, когда мы присваиваем им значение в кавычках), то мы имеем право вызвать метод [`downcase` для типа *String*](https://ruby-doc.org/core-2.5.1/String.html#method-i-downcase). Этот метод преобразует заглавные буквы в строчные, и мы видим на экране вывод маленькими буквами.

Больше всего нас интересует вторая строка `x = x.downcase`. В языке Руби было принято соглашение для удобства, если требуется изменить значение самой переменной, не обязательно ее «переопределять» вот таким образом. Можно написать `x.downcase!` — и Руби будет знать, что операцию *downcase* нужно проделать не «просто так» и вернуть результат, а заменить значение самой переменной.

Не для каждого метода существует эта функциональность, в каждом отдельном случае требуется смотреть документацию. В Руби вызов метода с восклицательным знаком считается «опасным», т.к. меняется состояние (значение) объекта. Что же тут опасного, скажет читатель, ведь мы просто меняем значение! Но не все так просто.

Рассмотрим такую программу (без каких-либо хитрых трюков, просто попробуйте догадаться, что будет на экране):

```ruby
a = 'HI'
b = a
a = 'xxx'
puts b
```

У нас две переменные: `a` и `b`. На второй строке переменной `b` присваиваем значение a. То есть переменная `b` приобретает значение «HI». Далее мы «забиваем» значение переменной `a` иксами (потому что можем, далее будет понятно почему). Что будет на экране? Да ничего необычного, переменную `b` мы не трогали, и мы увидим «HI».

{width: 80%}
![Создание объектов в Руби](images/017-objects-in-ruby.png)

Теперь перепишем программу немного иначе:

```ruby
a = 'HI'
b = a
a.downcase!
puts b
```

Почти то же самое, отличается только третья строка. С переменной `b` мы ничего не делали. Но зато сделали с переменной `a` «опасную операцию». Что будет выведено на экран? Оказывается, что «опасная операция» поменяет значение `b`. Попробуйте сами, вы увидите `hi`.

Объяснение этому кроется в том, как именно работает язык Руби. Для начинающего вряд ли есть большой смысл вдаваться в эти детали. Вкратце лишь заметим, что каждая переменная — это просто адрес (число от 1 до какого-то большого значения, например `123456789`). А вот само значение находится где-то далеко в памяти по этому адресу. 

Аналогия может быть с квартирным домом. В многоквартирном доме висит несколько звонков, у каждого звонка свой номер. Когда мы создаем новую переменную, то мы создаем новый звонок, который ведет к какой-то новой квартире. Когда присваиваем `b = a`, то новый звонок `b` ведет к той же самой квартире и все работает. Но когда мы выполняем «опасную операцию», то мы меняем не звонки, а содержимое самой квартиры.

В методе с восклицательным знаком нет ничего магического. Когда мы научимся создавать свои классы и объекты, вы сами сможете написать свой `bang-метод`. В некоторых популярных фреймворках эти методы также присутствуют. Например, в *Rails* (веб-фреймворк, который мы будем изучать) существует популярный метод `save!`, который сохраняет объект. Восклицательный знак «намекает» на то, что: 1) операция опасная, меняется внутреннее состояние объекта; 2) если что-то пойдет не так, то может возникнуть исключение (об исключениях мы еще поговорим ниже).

Важно запомнить!

* Оператор присваивания `=` автоматически создаёт новый объект для переменной;
* одинаковых значений может быть множество;
* наименование каждой переменной уникально.

{width: 80%}
![Новые объекты в памяти](images/018-new-objects-for-the-var.png)

X> ## Задание
X> Посмотрите, какие еще существуют bang-методы у класса *String*.

Загадка: создайте и запустите следующую программу:

{line-numbers: false}
```
# frozen_string_literal: true
a = 'aaa'
b = 'aaa'
puts a.object_id
puts b.object_id
```
После этого удалите первую строку (комментарий). Запустите программу еще раз. Результат отличается. Почему?
