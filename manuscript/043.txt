## Инициализация массива

Мы уже попробовали инициализировать массив с помощью такой конструкции:

{line-numbers: false}
```ruby
arr = []
``` 

Если мы предварительно хотим что-то поместить в массив, то конструкция выглядит немного иначе:

{line-numbers: false}
```ruby
arr = ['one', 'two', 'three']
```

Можно также получить размер массива с помощью `arr.size`. Обратите внимание, что названия методов в Руби повторяются. У класса *String* есть метод `size`, который возвращает длину строки, а у массива метод `size` возвращает размер массива, т.е. количество элементов. У класса *String* метод `each_char` используется для итерации по каждому символу в строке, и у массива метод `each` используется для итерации по каждому элементу. Другими словами, часто работает принцип наименьшего сюрприза и о некоторых методах можно догадаться. В будущем, когда нам встретятся новые типы, попробуйте догадаться о том, какое значение может возвращать метод `size`.

К сожалению или к счастью, инициализировать массив в Руби можно разными способами, которые являются совершенно идентичными:

{line-numbers: false}
```ruby
arr = []
```

Или альтернативная запись:

{line-numbers: false}
```ruby
arr = Array.new
```

На наш взгляд, это недоработка языка, ведь начинающему придется знакомиться сразу с двумя идентичными конструкциями, но не бывает единого мнения! Кто-то считает, что это правильно, кто-то нет, и это абсолютно нормально. У вас, как у начинающего, может быть свое собственное мнение.

Преимущество полной записи в том, что методу `new` (на самом деле это метод `initialize`, но мы поговорим об этом позже) можно передать параметр — размер массива:

{caption: "Передача параметра в Array.new", line-numbers: false}
```
$ irb
> arr = Array.new(10)
=> [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil]
```

По умолчанию он заполняется пустым значением (`nil`). Но мы также можем инициализировать массив каким-либо значением. Представим, что в компьютерной игре ноль представляет пустое место, а единица — одного солдата. Мы хотим создать взвод солдат, мы можем сделать это с помощью следующей конструкции (попробуйте самостоятельно в REPL):

{line-numbers: false}
```ruby
Array.new(10, 1)
```

Конструкция создаст массив размером 10, где каждый элемент будет равен единице:

{line-numbers: false}
```
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
```
