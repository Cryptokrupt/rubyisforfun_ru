## Настройка Windows для запуска первой программы

*Терминал* (который также называют словами «консоль», «оболочка», «шелл», «командная строка») — друг любого руби-хакера. Чтобы запускать программы, которые мы с вами напишем, нужен какой-то центральный пульт, *откуда* мы будем руководить процессом. Этим пультом и служит терминал.

Ради точности следует заметить, что *терминал* — не совсем правильное слово. Но оно часто используется. Программисты говорят «запустить в терминале», но если копнуть глубже, то терминал — особая программа, которая запускает оболочку (shell). И на самом деле мы отправляем команды в оболочку, где терминал служит лишь транзитным звеном, удобной программой для соединения с оболочкой.

Забегая вперед, хочется заметить, что существуют разные типы оболочек. Стандартной оболочкой в индустрии является bash. Однако, авторы рекомендуют использовать zsh (читается как «зи-шелл»), в вариации [«Oh My Zsh»](https://ohmyz.sh/). Эта оболочка немного отличается от стандарта, но дает более широкие возможности и является более удобной.

Но в ОС Windows стандартная оболочка это cmd.exe. Если вы нажмете Пуск — Выполнить — cmd.exe: 

{width: 80%}
![Запуск cmd.exe на Windows](images/009-run.png)

Вы увидите черный экран и «приглашение» командной строки:

{width: 80%}
![Windows shell](images/009-cmd-exe.png)

«Приглашение» заканчивается символом >, который означает, что оболочка ожидает вашего ввода. Стоит сразу запомнить неочевидный момент — если что-то не получается, необходимо попробовать перезапустить оболочку. Это справедливо и для других операционных систем и за свою карьеру авторы наблюдали “магическое действие” этого трюка на уже, казалось бы, очень опытных программистах. Выйти из оболочки можно словом exit или просто нажав на крестик вверху окна.

В ОС Linux и Mac терминал обычно доступен по-умолчанию среди программ и можно запустить его щелкнув по невзрачной иконке, скорее всего в виде прямоугольника. В этих операционных системах приглашение командной строки принято обозначать символом доллара $. Это не всегда правда, но на будущее стоит запомнить — если вы видите знак доллара где-нибудь в документации и после этого знака идет команда 

```
$ ls
```

то знак доллара обычно вводить не надо. Это просто индикатор того, что команду надо выполнять в оболочке bash (или частично совместимой с ней zsh).

Неважно, в какой оболочке вы сейчас находитесь, введите команду ruby и нажмите «Enter». В случае с Linux и MacOS ошибки не будет, команда запустится и тихо будет ожидать окончания ввода программы. В Windows должна быть ошибка, ведь язык руби по-умолчанию не установлен, а это значит, что нам надо его установить.

Тут следует сделать отступление. Сейчас и в будущем — если вы не знаете, что делать, задайте вопрос google. Например, в нашем случае — «*how to run ruby program on windows*». Умение задавать вопрос и искать ответ — половина дела. Если честно, то только благодаря этому умению можно научиться программировать. Главное — мыслить последовательно и логически. Если не получается, всегда можно обратиться за помощью в [чат](https://t.me/rubyschool).

Для запуска программ на руби из ОС Windows нужно запустить [Ruby Installer](https://rubyinstaller.org/). После того, как программа установлена, можно вводить команду `*ruby*` в терминале. Если команда не работает, попробуй перезапустить терминал. TODO про пути. Ruby запустится «тихо», и будет ожидать вашего ввода. Введите `puts 1+1`, затем нажмите Enter, а потом Ctrl+D (иногда Ctrl+D приходится нажимать два раза):

```
$ ruby
puts 1+1 (нажмите Ctrl+D в этом месте)
2
$
```

Что мы видим на экране выше? Приглашение командной строки ($), вводим ruby, потом `puts 1+1`, потом Enter, который переводит нас на следующую строку, на которой мы нажимаем Ctrl+D. После этого «сама появляется» цифра 2. Что же тут произошло?

Во-первых, вы запустили программу для запуска программ. Ruby — это программа (интерпретатор), которая позволяет запускать ваши, человечески написанные, программы. Компьютер говорит на языке нулей и единиц, и чтобы вас понять, ему надо считать человеческий язык - `puts 1+1`.

Комбинация Ctrl+D (обозначается также ^D) пригодится вам во всей вашей дальнейшей жизни, она передает сигнал о том, что «ввод закончен» (конец ввода, end of input, end of file, EOF). Это байт (его значение равно 4 — это запоминать не надо), который говорит о том, что наступил конец текстового потока данных, данных больше не будет. Интерпретатору ruby ничего больше не остается — только запустить то, что вы написали, что и было сделано.

Набранная вами команда `puts 1+1` — это ваша первая программа. Но мы не сохраняли ее в файле, мы ввели эту программу с клавиатуры и она «пропала» после того, как была выполнена. Сожалеем, что вы не сохранили свою первую программу. Но ничего страшного, она занимала всего лишь 8 байт, и восстановить ее — небольшая проблема.

Что же такое `puts 1+1`? Прежде чем ответить на этот вопрос, выполните задание. Запустите программу “1+1” (без puts). Мы увидим, что ничего не происходит. На самом деле результат был посчитан, но просто не выведен на экран. Возможен вариант, когда вы зададите компьютеру какую-нибудь сложную задачу и он будет считать ее очень долго. Но если вы не написали `puts`, то результат мы не узнаем.

Другими словами, puts выводит результат. Это сокращение от двух английских слов: *put string* (вывести строку). В других языках были приняты другие сокращения для вывода строки, например в языке BASIC это `print`.

Так почему же надо писать `puts` вначале, а не в конце? Ведь сначала надо посчитать, а потом уже выводить. Все просто, в этом случае говорят: «*метод (функция) принимает параметр*». Т.е. сначала мы говорим, что мы будем делать — *выводить*, а потом — что именно мы хотим выводить. Нашу программу можно также записать как `puts(1+1)`. В этом случае видно, что в скобках — параметр. Ведь в математике мы сначала считаем то, что в скобках, а потом уже выполняем остальные действия. Кстати, наши поздравления! Вы написали свою первую программу.

X> ## Задание: 
X> Остановитесь тут и попробуйте написать программу, которая считает количество миллисекунд в сутках.

Следующий абзац содержит ответ:

```
$ ruby 
puts 60 * 60 * 24 * 1000
(нажмите Ctrl + D)
```

Задача чисто математическая, количество секунд в минуте умножаем на количество минут в часе, умножаем на количество часов в сутках. И, чтобы получились миллисекунды, а не секунды, умножаем на 1000. Далее, попробуйте запустить следующую программу:

{caption: "Программа Ruby для вычисления математического выражения, упомянутого выше:"}
```ruby
puts 5**5 * 4**4 * 3**3 * 2**2 * 1**1
```

Запись ** означает возведение в степень. Например, 3 ** 2 = 3 * 3 = 9. Удивительно, но результат работы программы (5 в пятой степени умноженное на 4 в четвертой и т.д.) выше будет равен количеству миллисекунд в сутках! Объяснений этому нет, просто забавный факт. В качестве упражнения попробуйте запустить следующую программу и угадайте, что произойдет?

{caption: "Попробуйте угадать, что будет напечатано на экране?"}
```ruby
puts 60 * 60 * 24 * 1000 == 5**5 * 4**4 * 3**3 * 2**2 * 1**1  
```

