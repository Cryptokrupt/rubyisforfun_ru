## Ruby Version Manager (RVM)

Информация в этом разделе является очень важной для любого начинающего руби программиста. Возможно, стоило бы дать эту информацию в самом начале, но наша основная задача заключалась в быстром старте. А информация про менеджер версий руби (ruby version manager или сокращенно rvm) может потребовать понимания и привычки. Поэтому мы не хотели пугать новичков переде тем, как они напишут первую программу и сделают что-то осмысленное.

Примечание: если информация из этой главы вам покажется сложной, можно отложить ее до лучших времен.

Rvm это надстройка для вашей оболочки (shell), которой может являться или bash, или zsh, или что-то еще (например, RubyMine). Каждый программист запускает программу в своем терминале с помощью команды `ruby app.rb`. Но откуда берется исполняемый файл `ruby`? Давайте посмотрим что выдает команда `which` на системе без rvm:

{line-numbers: false}
```shell
$ which ruby
/usr/bin/ruby
```

Другими словами, интерпретатор руби находится в `/usr/bin/ruby`. Это бинарный файл, его можно просмотреть с помощью, например, Far Manager:

{width=100%}
![Двоичный файл Руби](images/089-ruby-binary.png)

Если удалить этот файл, то программы запускаться не будут. Но откуда система знает, что руби нужно брать именно из каталога `/usr/bin`? Давайте посмотрим значение переменной `$PATH` (путь) в нашей оболочке (ваш вывод может немного отличаться):

{line-numbers: false}
```shell
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

Ага, переменная `$PATH` содержит несколько директорий, разделенных двоеточием:

* /usr/local/bin
* /usr/bin (директория с интерпретатором руби)
* /bin
* /usr/sbin
* /sbin

Когда вы вводите команду `ruby` оболочка пытается найти файл в первой директории, если не находит то во второй и так далее. Если переопределить эту переменную особым образом, то можно заставить оболочку искать исполняемый файл где-либо еще (вы уже поняли, что для переопределения надо добавлять новый путь в начало, а не в конец). Но где добавлять этот путь?

Настройки bash хранятся в вашем домашнем каталоге (получить путь к дом. каталогу можно с помощью команды `echo $HOME` или `echo ~`) в дот-файле с именем `.bashrc`.

В POSIX/UNIX-совместимых системах (не Windows) дот-файл (в английском языке так и называется dot-file) это файл с точкой впереди. Он считается скрытым, `hidden`, и не выдается в списке когда вы запускаете команду `ls`. Однако, если запустить `ls -a` (list all), то его будет видно. В ОС Windows дот-файлы являются обычными файлами. А hidden-файлы это файлы с особым атрибутом. Существует комбинация `Ctrl+A` в Far Manager для Windows для просмотра и установки атрибутов.

Настройки zsh хранятся в `~/.zshrc`. Возможно, в этих файлах уже есть определение переменной `PATH`. Но зачем нам нужен RVM и вообще все эти танцы?

Дело в том, что на самом деле существует много различных языков руби. Да-да, тот руби, про который мы все это время говорили это не просто руби, а руби какой-то определенной версии. Узнать свою версию можно с помощью команды:

{line-numbers: false}
```shell
$ ruby -v
ruby 2.6.1p33 (2019-01-30 revision 66950) [x86_64-darwin16]
```

«Системный» руби — тот самый, который находится в директории `/usr/bin` и который поставляется вместе с вашей операционной системой. К сожалению, на ОС Windows этот язык по-умолчанию не устанавливается. И release notes macOS 10.15 дает нам такую информацию:

> Scripting language runtimes such as Python, Ruby, and Perl are included in macOS for compatibility with legacy software. Future versions of macOS won’t include scripting language runtimes by default, and might require you to install additional packages. If your software depends on scripting languages, it’s recommended that you bundle the runtime within the app. (49764202)

Перевод:

> Скриптовые языки такие как Питон, Руби и Перл включаются в macOS для совместимости с легаси-софтом. Будущие версии macOS не будут включать скриптовые языки по-умолчанию, вам может потребоваться установить дополнительные пакеты. Если ваше ПО (идет обращение к разработчикам — Р.П.) зависит от скриптовых языков, рекомендуется поставлять эти языки вместе со своим приложением.


Скорее системный руби не является самой последней версией языка. Вполне вероятно, что существуют более актуальные версии, с новыми возможностями и улучшенной производительностью. Но как об этом узнать и как пользоваться всегда самой последней версией?

Но не будем спешить. «Самая последняя версия языка руби» скорее всего вам не понравится. Дело не в том, что руби плохой, а в том, что самая последняя и самая свежая версия языка руби (а также многих других программных продуктов) не самая стабильная. Существуют т.н. «ночные сборки» (nightly builds). Смысл в том, что все изменения, которые произошли за последний день собираются в одну ветку и в автоматическом режиме компилируются.

Краткая справка: компиляция это трансляция исходного кода в код машинный. А вот программы, написанные на руби, не компилируются, а интерпретируются: мы ведь запускаем программы с помощью команды `ruby app.rb`, а не просто `./app`. Поэтому такого понятия как «сборка» (build) в руби не существует. Однако, по привычке многие программисты называют «билдом» успешный запуск всех тестов. Сам же язык руби написан на языке Си. Если вызвать команду `show-method loop` в «pry» (потребуется установить pry-doc с помощью `gem install pry-doc`), то можно в этом убедиться:

{line-numbers: false}
```
$ pry
[1] pry(main)> show-method loop

From: vm_eval.c (C Method):
Owner: Kernel
Visibility: private
Number of lines: 6

static VALUE
rb_f_loop(VALUE self)
{
    RETURN_SIZED_ENUMERATOR(self, 0, 0, rb_f_loop_size);
    return rb_rescue2(loop_i, (VALUE)0, loop_stop, (VALUE)0, rb_eStopIteration, (VALUE)0);
}
```

Поэтому ночная сборка самого языка существует. Однако, по привычке многие программисты называют «билдом» успешный запуск всех тестов.

К слову, известный браузер Firefox тоже существует в виде ночных сборок. Вот что такое ночная сборка по версии команды разработчиков Firefox (с сайта https://wiki.mozilla.org/Nightly):

> Каждый день разработчики Mozilla пишут код, который сливается в общий репозиторий кода, и каждый день этот код компилируется. Таким образом создается пре-релизная версия Firefox, основанная на этом коде с целью тестирования. Вот что мы называем ночной сборкой. Когда этот код становится стабильным, он сливается в репозиторий со стабильным кодом (Beta и Dev edition), где этот код будет отполирован пока мы не достигнем уровня качества, который позволит нам выпустить новую окончательную версию Firefox для сотен миллионов людей.

Помимо ночной сборки языка руби существует также и preview-сборка, которая отличается от ночной тем, что она немного стабильнее. Но сборка, которая интересует нас так и называется — «стабильная» (stable). Поэтому мы не заинтересованы в самой последней версии языка, нас интересует стабильная версия. Вероятно, что в будущем вы столкнетесь со следующими видами билдов:

* nightly build
* preview
* alpha
* beta
* stable
* LTS (long-term support), не совсем билд, а более как тэг определенной версии

Чтобы узнать какая именно версия стабильная, можно пройти на официальный сайт в раздел [«Downloads»](https://www.ruby-lang.org/en/downloads/), где будет написано:

> The current stable version is...

Можно скачать эту версию на свой компьютер. Файл обычно скачивается в виде tar.gz-архива, поэтому потребуется его распаковать (не забудьте изменить X.Y.Z на версию, которую вы скачали):

{line-numbers: false}
```
$ tar xzf ~/Downloads/ruby-X.Y.Z.tar.gz
```

Но распаковав этот файл вы увидите исходный код языка, а не готовый исполняемый файл (войдите в директорию: `cd ruby-X.Y.Z` и выполните команду `ls -lah`). Поэтому язык руби нужно «собрать», просто для того, чтобы у вас в итоге получился исполняемый файл, с помощью которого уже можно будет запускать программы:

{line-numbers: false}
```
$ cd ruby-X.Y.Z
$ ./configure
checking for ruby... /usr/bin/ruby
tool/config.guess already exists
tool/config.sub already exists
checking build system type... x86_64-apple-darwin17.6.0
checking host system type... x86_64-apple-darwin17.6.0
checking target system type... x86_64-apple-darwin17.6.0
checking for clang... clang
checking for gcc... (cached) clang
...
$ make
    CC = clang
    LD = ld
...
```

После сборки в текущей директории появится бинарный исполняемый файл, который можно запустить:

{line-numbers: false}
```shell
$ ./ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]
```

Префикс `./` говорит о том, что нужно запустить файл в текущей директории, а не тот, который находится у вас в пути (переменная оболочки `PATH`). Сравните с тем, что написано выше:

{line-numbers: false}
```shell
$ ruby -v
ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]
```

Если выполнить команду `sudo make install`, то можно заменить системный руби только что скомпилированной версией языка. Вот только на macOS новая версия языка будет установлена в `/usr/local/bin`. А текущий системный руби установлен в `/usr/bin`. Но это не проблема, т.к. первая директория находится перед последней в переменной `PATH` (выполните команду `echo $PATH`). Необходимо перезапустить ваш терминал чтобы оболочка приняла изменения (или выполнить команду `source ~/.bashrc`, `source ~/.zshrc` — в зависимости от типа используемой оболочки).

Согласитесь, что все это как-то сложно и не очень удобно. Но зачем это сделано? Дело в том, что руби один, а операционных систем много. Это не только Windows, macOS, Linux, но также и разные версии этих операционных систем. Каждая ОС имеет свои настройки, которые оказывают влияние на производительность. Чтобы язык руби использовал все эти возможности, необходимо «собрать» (build) этот язык на точно таком же компьютере как у вас (или на вашем собственном). Ведь даже на одинаковых операционных системах может отличаться тип процессора! А одна оптимизация на уровне процессора работает на одном компьютере, и не работает на другом. Например, один компьютер может быть новее, с более мощным и усовершенствованным процессором, а другой с устаревшим.

Мы собрали язык руби, обновили системный руби, и больше через этот этап мы проходить не будем! Но, как говорил Стив Джобс, «there is one more thing». Не все так просто в мире разработки (и именно за это нам платят деньги).

Вы, наверное, обратили внимание, что версия почему-то выражается в трех цифрах. Не руби 1, 10, 42, а руби 2.3.3, руби 2.5.1 и так далее. Зачем нужны три цифры вместо одной?

Существует такое понятие как «Semantic Versioning» (или сокращенно «SemVer», «семантические версии» или «семантическая версионность»). Подробная информация по semver доступна по [адресу](https://semver.org/lang/ru/). Вот краткая справка с этого сайта:

===
*Учитывая номер версии МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ, следует увеличивать:*

* *МАЖОРНУЮ версию, когда сделаны обратно несовместимые изменения API.*
* *МИНОРНУЮ версию, когда вы добавляете новую функциональность, не нарушая обратной совместимости.*
* *ПАТЧ-версию, когда вы делаете обратно совместимые исправления.*
* *Дополнительные обозначения для предрелизных и билд-метаданных возможны как дополнения к МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ формату.*
===

Другими словами, в версии руби 2.3.1 мажорная версия это 2, минорная это 3, а патч это 1. Попробуем в этом разобраться, потому что это важно.

Дело в том, что процесс разработки любой программы может включать:

* исправление багов — увеличивается патч-версия
* улучшение функциональности (добавление фич) — увеличивается минорная версия
* серьезные изменения всей программы — увеличивается мажорная версия

В случае исправления багов программа остается в принципе такой же. Две версии может и отличаются, но ненамного. Две версии языка руби в этом случае были бы абсолютно идентичными, за исключением каких-то, возможно редких, исправленных багов. Можно было бы заменить одну версию на другую без особых проблем. Но чтобы понять какая версия лучше, увеличивают патч.

Например, программа была версии 0.1.0 (рекомендуемая начальная версия в `semver`), а стала 0.1.1. Значит что-то исправили и 0.1.1 лучше. Или, например, программа была версии 0.1.9, а стала 0.1.10. Что-то исправили в версии 0.1.9 и увеличили патч-версию на единицу. Но по сути 0.1.10 можно заменить даже на 0.1.0, ничего страшного не должно произойти.

В случае улучшения функциональности какой-либо программы, в старых версиях этой функциональности не существует. Что это означает для языка руби? Например, в новой версии появляется новый оператор «yeah», который выводит на экран строку «Oh, yeah!». Мы пишем программу на новой версии, а потом по какой-то причине «откатываемся» на старую. Но в старой версии нет этого оператора и наша программа не работает!

Чтобы дать остальным понять, что эта программа новая и обратно с нее откатываться нельзя, мы увеличиваем минорную версию (та, что посередине), а заодно и сбрасываем патч-версию в ноль. Например, программа была 0.1.10, а будет 0.2.0. Разумеется, что новая версия включает в себе все патчи из предыдущей. Но т.к. она содержит новую функциональность, минорная версия увеличена на единицу.

Если посмотреть на язык руби, то версия 2.3.3 и 2.5.1 отличается на 2 по минорной версии. Это значит, что в версии 2.4.x и 2.5.x была представлена какая-то новая функциональность. И если написать программу на 2.5.x с использованием этой функциональности, то она не будет работать на всех версиях ниже (на 2.4.x, 2.3.x и т.д.).

Мажорную версию увеличивают в двух случаях:

* С нуля до единицы когда софт точно готов к использованию в `production` (об этом не говорится в документации к `semver`).
* С единицы выше — когда вводятся обратно-несовместимые изменения (говорят *breaks backwards compatibility*) или когда происходит серьезное обновление.

Другими словами, если версия была 0.2.0, а стала 1.0.0, то есть большая вероятность того, что программы написанные на 0.2.0 не будут работать в версии 1.0.0. Другими словами, при увеличении мажорной версии все что вы написали раньше превращается в тыкву! Приходится переписывать все заново!

Но это в самом худшем случае. Обычно при обновлении мажорной версии даются подробные инструкции о том, как перейти именно на новейшую версию. Отсюда возникает философия разработки любого программного продукта, а в особенности фреймворка или языка программирования. Как развивать программу?

Что делать, быстро двигаться вперед, не оглядываясь на то, что было сделано ранее, ломать обратную совместимость и забыть про прошлое? Или все-таки исповедовать консервативный подход — поддерживать старые версии, т.к. существует множество уже написанного кода. Выкатывать новую версию означает в какой-то момент перестать поддерживать старую. Но у старой версии есть пользователи, что с ними делать?

Многие команды, отвечающие за выпуск языков, фреймворков и других программных продуктов пытаются найти баланс. Например, открыто заявляют о том, какие версии поддерживаются (maintained), какие версии имеют долгосрочную поддержку (LTS, long-term support), какие уже пришли к EOL (end of life — конец жизни), а какие поддерживаются сейчас только в режиме исправления проблем с безопасностью (security maintenance phase). В любом случае, руби не стоит на месте, компании вынуждены переходить с более старых версий на новые. Ведь никто не хочет оказаться наедине с версией языка ruby, которой уже пришел EOL. Поэтому компании платят деньги нам, программистам, и мы аккуратно переводим системы с одной версии на другую (и тут нам очень помогают наши юнит-тесты).

Мы разобрались с проблемами, которые существуют в виду того, что язык руби растет и развивается. И у бизнеса возникает резонный вопрос: «*окей, версии языка бывают разные, где-то можно обновить версию языка на новую, где-то нельзя и приходиться пользоваться старой, но системный руби-то всегда одной версии! Что нам делать, если у нас два проекта? Один требует старой, другой новой версии. Каждый раз перекомпилировать руби и устанавливать его в систему? А если проекта два и один через API общается с другим, и при этом их нужно запустить на одном и том же компьютере?*».

Но все гениальное просто! Давайте просто создадим директорию, в которой будем хранить все версии языка:

* 2.5.1
* 2.3.3
* 2.0.0

и так далее. Каждый руби назовем по-своему: `ruby-2.5.1`, `ruby-2.3.3`, и т.д. И вместо запуска `ruby app.rb` будем использовать `ruby-2.5.1 app.rb`. Отличное решение! Но... there is one more thing.

Помимо исполняемого файла `ruby` существует еще исполняемый файл `gem` (введите `which gem` чтобы посмотреть где этот исполняемый файл находится). Концепция gem'ов это концепция дополнительных библиотек от авторов со всего мира, которые скачиваются из Интернета при выполнении команды `gem install …` и куда-то помещаются на вашем жестком диске.

При этом каждый gem имеет параметр, который называется `required_ruby_version`. Другими словами, если вы установили gem для версии 2.5.1, не факт что он будет работать для версии 2.3.3. Поэтому вместе с созданием директории для разных версий руби нам нужно еще создать директории для разных версий gem’ов. Получается, что иметь на одном компьютере сразу несколько версий руби невозможно? 

Возможно. Если бы мы продолжали наши эксперименты, то рано или поздно мы бы нашли способ самостоятельно установить разные версии руби таким образом, чтобы все прекрасно работало. Однако, эта проблема беспокоила не только нас. Программисты со всего мира пришли к выводу, что должны быть способы проще. И родилась концепция “менеджера версий руби” — Ruby Version Manager, или RVM.

RVM сам по себе не является чем-то уникальным для руби. Для других языков тоже существуют менеджеры версий. Например, для языка JavaScript существует NVM — Node.js Version Manager. Мы рассмотрим rvm, но основные концепции также справедливы и для многих других языков.

Для начала про установку. Инструкции для установки доступны на [сайте](https://rvm.io/), а краткая справка сообщает о том, что это такое:

> RVM это инструмент для командной строки, который позволяет вам легко установить, управлять, и работать с несколькими руби-окружениями: от интерпретаторов до наборов gem’ов

Sets of gems — набор gem’ов (или gemset) важное понятие, мы вскоре с ним познакомимся. RVM устанавливается с помощью двух команд (скопируйте их с сайта rvm, т.к. команды ниже могут устареть):

{line-numbers: false}
```
$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
$ \curl -sSL https://get.rvm.io | bash -s stable
```

Если присмотреться к логам установки, то можно увидеть следующий текст (у вас он может быть немного другим):

{line-numbers: false}
```
Installing RVM to /Users/ro/.rvm/
	Adding rvm PATH line … /Users/ro/.bashrc /Users/ro/.zshrc.
	Adding rvm loading line to ... /Users/ro/.bash_profile /Users/ro/.zlogin.
Installation of RVM in /Users/ro/.rvm/ is almost complete:

  * To start using RVM you need to run `source /Users/ro/.rvm/scripts/rvm`
	in all your open shell windows, in rare cases you need to reopen all shell windows.
```

Установщик рекомендует вам выполнить `source /Users/ro/.rvm/scripts/rvm`, если вы хотите начать использовать rvm без перезапуска терминала. Теперь мы можем запустить rvm и посмотреть его версию:

{line-numbers: false}
```
$ rvm -v
rvm 1.29.4 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
```

Или справку:

{line-numbers: false}
```
$ rvm --help

Usage:

	rvm [--debug][--trace][--nice] <command> <options>

  for example:

	rvm list            	# list installed interpreters
	rvm list known      	# list available interpreters
	rvm install <version>   # install ruby interpreter
	rvm use <version>   	# switch to specified ruby interpreter
	rvm remove <version>	# remove ruby interpreter
	rvm get <version>   	# upgrade rvm: stable, master
...
```

Установщик rvm также изменил переменную `PATH`, о которой мы говорили выше. При этом rvm установил себя в домашнюю директорию в каталог `.rvm` (можете посмотреть ее содержимое с помощью `ls -lah ~/.rvm`). «Перехватив» таким образом путь, rvm будет «подсовывать» вам ту или иную версию руби в зависимости от обстоятельств. Но какие это обстоятельства и каким образом rvm будет «подсовывать» вам ту или иную версию руби?

Тут заключается магия rvm, за которые этот менеджер версий многие не любят. Секрет заключается в том, что rvm подменяет команду оболочки `cd` (change directory — сменить директорию). Когда вы меняете директорию, rvm пытается определить какой руби нужно использовать сейчас. Алгоритм очень простой (о нем чуть ниже) и у rvm есть два варианта действий после того, как вы сменили директорию:

* Молча (или почти молча) «Подсунуть» вам нужную версию руби, чтобы вы ничего не заметили
* Не делать ничего

Но как именно rvm решает, что нужно подсунуть вам какую-то версию, в чем заключается алгоритм? Все очень просто: в руби-сообществе было достигнуто соглашение о том, текущая версия руби для определенного проекта должна храниться в файле `.ruby-version` (с точкой вначале) в директории проекта. Этот файл должен просто содержать строку с версией руби, например `2.5.1`. И при смене директории в терминале, rvm попробует «подсунуть» вам эту версию руби «почти молча»: если она еще не была скачена из интернета, то rvm сообщит об этом.

Давайте создадим любую директорию, попробуем войти в нее, записать в `.ruby-version` версию руби, потом выйти из директории и снова в нее войти — это нужно для того, чтобы сработал rvm, ведь изначально файла `.ruby-version` в директории не будет. Но прежде, чем это сделать, посмотрим на текущий руби и его версию:

{line-numbers: false}
```
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]

$ which ruby
/usr/local/bin/ruby
```

Теперь можно попробовать магию rvm:

{line-numbers: false}
```shell
$ mkdir rvm-test # создаем rvm-test
$ cd rvm-test # переходим в эту директорию
$ echo "2.3.1" > .ruby-version # записываем версию 2.3.1 в наш файл
$ cd .. # выходим на уровень вверх
$ cd rvm-test # и снова переходим в эту директорию
Required ruby-2.3.1 is not installed.
To install do: 'rvm install "ruby-2.3.1"'
```

Вот это да! Получилось! RVM выдал нам сообщение о том, что руби версии 2.3.1 не установлен и сразу же команду для установки (напоминаем, что список всех команд доступен в справке: `rvm --help`).

Запустим эту команду, RVM попробует найти уже откомпилированный (бинарный) файл этой версии ruby именно для вашей операционной системы где-то у себя на серверах:

{line-numbers: false}
```
Searching for binary rubies, this might take some time.
No binary rubies available for: osx/10.13/x86_64/ruby-2.3.1.
```

Если файл не будет найден, то исходный код этой версии будет скачан с официального сайта и будет откомпилирован на вашем компьютере! Согласитесь, что это немного проще, чем компиляция с помощью `./configure`, `make` и т.д., которую мы делали ранее?

После того как файл будет откомпилирован и установлен, мы сможем проверить версию воспользоваться установленной версией языка руби:

{line-numbers: false}
```
$ ruby -v
ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin17]

$ which ruby
/Users/ro/.rvm/rubies/ruby-2.3.1/bin/ruby
```

Другими словами, rvm подменил нам руби на тот, который был указан в `.ruby-version`:

Было:

* Версия руби: ruby 2.5.1p57
* Путь к руби: /usr/local/bin/ruby

Стало:

* Версия руби: ruby 2.3.1p112 
* Путь к руби: /Users/ro/.rvm/rubies/ruby-2.3.1/bin/ruby

При этом старый файл `/usr/local/bin/ruby` остался на диске. Просто была подмена `PATH`, переменной, которая отвечает за пути к файлам. И теперь наша оболочка просто обращается к другой директории. И все это в автоматическом (окей, полу-автоматическом) режиме.

Иметь `.ruby-version` в директории проекта очень важно, т.к. другие программисты будут точно знать какой версией руби вы пользовались, когда создавали работали над проектом. Этот файл позволит избежать вопросов в команде «а какую версию руби мне устанавливать для проекта Х?». Это, как говорят, *single source of truth* (единый источник истины). Если версия обновилась, то вся команда будет знать, где смотреть. Более того — если этой версии на компьютере разработчика нет, то RVM подскажет как ее установить.

Выше мы установили нужную версию руби, зная про секрет RVM. Но можно ли как-нибудь установить версию руби без этого секрета, без создания `.ruby-version`?

Можно. Воспользуемся двумя командами:

* `rvm list known` — выдает список доступных версий руби. Нас интересует версии MRI.
* `rvm install ...` — установить руби определенной версии, вместо троеточия необходимо указать версию языка.

{line-numbers: false}
```
$ rvm install 2.5.1
Searching for binary rubies, this might take some time.
No binary rubies available for: osx/10.12/x86_64/ruby-2.5.1.
Continuing with compilation. Please read 'rvm help mount' to get more information on binary rubies.
...
```

Выше мы ввели команду для установки руби версии «2.5.1». Появилась отладочная информация, которая сказала о том, что скомпилированной (готовой) версии руби 2.5.1 для нашей операционной системы (macOS 10.12) пока не существует, поэтому сейчас будет скачан и откомпилирован исходный код языка руби на нашем компьютере.

Как вы могли заметить, RVM пытается найти где-то на своих серверах версии руби по следующим признакам:

* `osx` — тип ОС, может быть Linux, Windows или что-то еще (теоретически)
* `10.12` — версия ОС, существует множество разных версий как macOS, так и остальных ОС
* `x86_64` — архитектура процессора
* `ruby-2.5.1` — версия языка

Если перемножить количество всевозможных типов ОС на количество различных версий этих ОС, на количество возможных архитектур процессора (не так много), и на количество версий языка, то получится довольно большое число. Другими словами, RVM держит на своих серверах тысячи откомпилированных версий руби. Некоторые из этих версий были откомпилированы на точно таких же компьютерах, как и у вас.

Возникает вопрос: а зачем нужны откомпилированные версии? Дело в том, что скачивание откомпилированной версии занимает секунды, а компиляция — во много раз больше. Также можно было бы откомпилировать одну версию руби сразу для определенного семейства ОС (например, для macOS от 9 до 10 версий), но каждая ОС может содержать свои настройки производительности или тонкие моменты, о которых компилятору хорошо бы знать.

Но с точки зрения «потребителя» особенности работы RVM не очень важны, нас интересует вопрос как установить и использовать RVM без дот-файла (файла, начинающегося с точки: `.ruby-version`). Мы разобрались с тем, как установить: например, `rvm install 2.5.1`. Но что же с использованием?

Представьте, что установлено несколько версий: 1, 2, 3. Если дот-файлов в каталогах нет, то нам надо как-то выбирать какую именно версию мы хотим использовать. Для этого существует команда оболочки `use`, с очень простым синтаксисом:

{line-numbers: false}
```shell
$ rvm use 2.5.1
Using /Users/ro/.rvm/gems/ruby-2.5.1
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin16]
$ rvm use 2.3.1
Using /Users/ro/.rvm/gems/ruby-2.3.1
$ ruby -v
ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin16]
```

Чтобы вывести список всех установленных руби существует команда `list`:

{line-numbers: false}
```shell
$ rvm list
   ruby-2.3.1 [ x86_64 ]
   ruby-2.4.2 [ x86_64 ]
 * ruby-2.5.0 [ x86_64 ]
=> ruby-2.5.1 [ x86_64 ]

# => - current
# =* - current && default
#  * - default
```

Также в RVM существует такое понятие как `default` версия (версия по-умолчанию). Другими словами та версия, которая будет автоматически использоваться при открытии терминала. Ее можно установить с помощью команды `alias`:

{line-numbers: false}
```shell
$ rvm alias create default 2.5.1
Creating alias default for ruby-2.5.1.....
$ rvm use default
Using /Users/ro/.rvm/gems/ruby-2.5.1
```

Отныне каждый раз когда мы будем говорить `rvm use default` будет использоваться версия 2.5.1.

На этом наше знакомство с инструментом RVM закончено. Возможно, что где-то вы услышите выражение `gemset`, которое означает ничто иное как «набор gem’ов». Но сейчас оно все реже используется, т.к. при использовании инструмента *Bundler* последних версий отпадает необходимость в таком понятии как `gemset`. По сути понятие о gemset’ах это возможность иметь разные наборы gem’ов для одной и той же версии руби. Но *Bundler* уже позволяет иметь разные наборы gem’ов, и каждый раз когда вы вносите исправления в *Gemfile* и вводите `bundle`, все происходит автоматически и без каких-либо проблем.

Запоминать все настройки RVM не нужно, но иметь представление о том, что это такое полезно, ведь помимо RVM существуют очень похожие инструменты для других языков:

* NVM — Node.js Version Manager для JavaScript
* VirtualEnv для Python
* Менеджеры версий для  Golang, Elixir, Java, .Net и так далее

Программисту нередко приходится работать с несколькими языками одновременно. Например, Ruby-программистам нередко приходится иметь дело с JavaScript и Golang. Устанавливать и настраивать несколько менеджеров версий иногда утомительно, поэтому независимыми разработчиками был придуман универсальный менеджер версий ASDF, который доступен на [сайте](https://asdf-vm.com/).