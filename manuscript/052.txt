## Методы length, size, count

Методы length и size идентичны и реализованы для классов *Array*, *String*, *Hash*:

{line-numbers: false}
```ruby
[11, 22, 33].size # => 3
[11, 22, 33].length # => 3


str = 'something'
str.size # => 9
str.length # => 9


hh = { a: 1, b: 2 }
hh.size # => 2
hh.length # => 2
```

Метод count выполняет ту же функцию, что и `length/size`, но только для классов *Array* и *Hash* (не реализован в *String*). Однако метод `count` может принимать блок, можно использовать его для каких-либо вычислений. Например, посчитать количество нулей в массиве:

{line-numbers: false}
```ruby
$ pry
> [0, 0, 1, 1, 0, 0, 1, 0].count { |x| x == 0 }
5
```

Удобно использовать метод `count` вместе с указателем на функцию. Если метод `zero?` реализован у всех элементов массива, можно записать конструкцию выше иначе:

{line-numbers: false}
```ruby
[0, 0, 1, 1, 0, 0, 1, 0].count(&:zero?)
``` 

Важно заметить, что `count` с блоком обычно проходит по всему массиву. Если вы используете метод `count` в Rails, необходимо убедиться, чтобы запрос был эффективным (Rails и SQL будут рассмотрены во второй части книги).

X> ## Задание: 
X> С помощью указателя на функцию посчитайте количество четных элементов в массиве [11, 22, 33, 44, 55].
