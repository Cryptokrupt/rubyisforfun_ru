# Часть 3. Время веселья

## Тернарный оператор

Тернарный оператор (ternary operator) встречается довольно часто и обычно является однострочной альтернативой (иногда говорят «one-liner») конструкции `if...else`. Многие программисты успешно применяют этот оператор, но не знают как он называется. Мы рекомендуем запомнить это название, потому что всегда приятнее сказать коллеге: 

>Уважаемый коллега, давайте заменим это прекрасное ветвление на тернарный оператор!.

Несмотря на страшное название, синтаксис у тернарного оператора очень простой:

{line-numbers: false}
```ruby
something_is_truthy ? do_this() : else_this()
```

Например:

{line-numbers: false}
```ruby
is_it_raining? ? stay_home() : go_party()
```

Что аналогично такой же записи, но с использованием `if...else`:

{line-numbers: false}
```ruby
if is_it_raining?
  stay_home()
else
  go_party()
end
```

Пустые скобки в том и другом случае можно опустить. Обратите внимание на двойной знак вопроса. Он появился из-за того, что авторы предполагают, что "is_it_raining?" это метод, который возвращает тип *Boolean* (*TrueClass* или *FalseClass*). А правило хорошего тона говорит о том, что все методы, возвращающие этот тип, должны заканчиваться знаком вопроса. Если бы результат зависел от какой-либо переменной, то запись имела бы более «понятный» вид:

{line-numbers: false}
```ruby
x ? stay_home() : go_party()
```

Или:

{line-numbers: false}
```ruby
x ? stay_home : go_party
```

Как видно из примера, тернарный оператор имеет более компактный вид и позволяет сэкономить несколько строк на экране. Недостаток (и одновременно преимущество) тернарного оператора в том, что он выглядит хорошо только тогда, когда нужно выполнить только одну инструкцию. Для нескольких методов подряд лучше использовать конструкцию `if...else`.

Результат выражения с тернарным оператором можно также записать в переменную. Например:

{line-numbers: false}
```ruby
x = is_it_raining?
result = x ? stay_home : go_party
```

`result` будет содержать результат выполнения операции `stay_home` или `go_party`. Это также справедливо и для конструкции `if...else`:

{line-numbers: false}
```ruby
x = is_it_raining?
result = if x
  stay_home
else
  go_party
end
```

В примерах выше результат выполнения метода `stay_home` или `go_party` будет записан в переменную `result`.

X> ## Задание
X> Запишите следующие примеры при помощи тернарного оператора:

**Пример 1:**

{line-numbers: false}
```ruby
if friends_are_also_coming?
  go_party
else
  stay_home
end
```

**Пример 2:**

```
if friends_are_also_coming? && !is_it_raining
  go_party
else
  stay_home
end
```