## Сравнение переменных и ветвление

Одна из основ программирования — сравнение переменных (или значений). В зависимости от результата сравнения мы можем выполнять ту или иную часть программы. Например: если возраст пользователя меньше 18, то ограничить доступ к этому интересному сайту и не показывать содержимое.

Когда сравнивают переменные, употребляют такие выражения как:

* «*Бранчинг*», «*ветвление*» — от англ. слова branch — ветвь. Подразумевается, что существует одна или более «ветвей» — участков кода, которые выполняются в зависимости от результата какого-либо сравнения. Примечание: в дальнейшем мы будем изучать работу с `git`, системой контроля версий, там тоже есть свои ветки, которые называют «*бранчи*». Это немного другое.
* «*Ветка*», «*блок*», «*бранч*» — участок кода, который, возможно, будет исполнен при соблюдении некоторого условия.
* «*Сравнение*», «*тест*» — непосредственно сама процедура сравнения. От программистов с опытом можно услышать слово `тест`: `тестирование` переменной на определенное значение. В *nix-оболочках можно ввести команду получения мануала (руководства) по тестированию переменных (это документация по тестированию переменных непосредственно для вашей оболочки, а не для языка руби):

  > $ man test
  > …
  > test - check file types and compare values

Примечание: в дальнейшем мы затронем тему тестирования наших программ и написание тестов. Это тоже будут тесты, но в другом смысле. Отличить одни тесты от других очень просто. Если речь идет об одной строке — значит это тест в смысле «сравнение», «тестирование переменной на определенное условие». Если речь идет о файле с тестом, значит это тестирование какой-то функциональности большой программы.

Давайте напишем простейшее сравнение:

```ruby
puts 'Your age?'
age = gets.to_i
if age > 18
  puts 'Access granted'
end
```

Результат работы программы:

{line-numbers: false}
```
$ ruby app.rb
Your age?
20
Access granted

$ ruby app.rb
Your age?
10
```

Для сравнения мы использовали оператор `if` (если), после которого мы пишем выражение, в нашем случае «age > 18». Если это выражение является истиной (true), то мы исполняем блок — все то, что следует до слова `end`. Если выражение является ложью (false), то блок внутри не исполняется. Блоки принято делать с отступами (indentation), 2 пробела для одного уровня вложенности являются стандартом в руби. Сами по себе отступы обычно не влияют на работу программы, однако инструменты статического анализа типа Rubocop могут выдавать предупреждения, если вы не соблюдаете правильный indentation.  

Тут мы плавно подходим к следующему типу данных. Чтобы узнать какой это будет тип данных, давайте сделаем эксперимент в REPL:

{line-numbers: false}
```
$ irb
> true.class
 => TrueClass
> false.class
 => FalseClass
> true.is_a?(Boolean)
[ERROR]
```

У-у-упс! Оказывается, что нет единого типа данных *Boolean*! Есть тип *TrueClass* и есть *FalseClass*. Однако, полезно держать в голове мысль о том, что `true` и `false` это почти одно и то же. В языке программирования Си *true* и *false* это просто значения типа *int*.

Сравнивать переменные или значения можно по-разному. Существует несколько операторов сравнения:

* `>` — больше
* `<` — меньше
* `==` — равно
* `!=` — не равно
* `>=` — больше или равно
* `<=` — меньше или равно
* `<=>` — (только руби) космический корабль (spaceship operator. Да, и такое бывает). Мы не будем рассматривать этот оператор, но он может вам пригодиться когда вы будете делать кастомную сортировку в руби. Например, создадите класс животных и захотите отсортировать их по количеству ушей.
* `===` — (только javascript) точно равно
* `!==` — (только javascript) точно не равно

JavaScript любопытен по своей природе. Не будем специально останавливаться, заметим лишь, что бывает точное сравнение, а бывает не точное. При обычном сравнении в JavaScript вы можете сравнивать «слонов и мух» (число в виде строки и просто число) и вы получите положительный результат:

{line-numbers: false}
```
$ node
> '5' == 5
true
```

В случае строгого сравнения в JavaScript мы получим «более предсказуемый» результат — «слонов и мух» сравнивать нельзя:

{line-numbers: false}
```
$ node
> '5' === 5
false
```

В руби трюк со «слонами и мухами» не сработает. Если вы сравниваете переменные разных типов, то результат всегда будет ложь:

{line-numbers: false}
```
$ irb
> '5' == 5
 => false
```

Кстати, в нашей программе вначале этой главы была допущена ошибка при сравнении возраста. Сможете ли вы ее увидеть? Наше условие было «age > 18», когда на самом деле мы хотим проверить «age >= 18», ведь восемнадцатилетие — это возраст совершеннолетия, после которого можно пускать пользователя на интересные сайты.

Если условие простое, из него можно также сделать `one-liner` (условие в 1 строку):

{line-numbers: false}
```
exit if age < 18
```

Т.е. если возраст пользователя менее 18 лет, то происходит выход из программы. Правда, в нашем случае мы не выдаем на экран никакого сообщения — ведь мы хотим написать все в 1 строку, поэтому используем только «exit» для выхода из программы. Если нужно выводить сообщение, то условие должно записываться в 2 строки:

{line-numbers: false}
```
if age < 18
  puts 'Доступ запрещен'
  exit
end
``` 

Иногда one-liner’ы облегчают читаемость программы и имеют смысл. Более того, они прекрасно читаются, ведь они очень точно повторяют речь человека: «выход если возраст меньше 18». Что может быть проще?

X> ## Задание: 
X> Попробуйте написать следующие сравнения в REPL и догадаться, каков будет результат для языка руби. Заполните таблицы:

**Table 1:**

|Выражение: | `1 > 1` | `1 < 1` | `1 >= 2` | `1 == 1` | `1 != 1` |
|Результат:|         |         |          |          |          |

**Table 2:**

|Выражение: | `1 > 2` | `1 < 2` | `1 <= 2` | `1 == 2` | `1 != 2` |
|Результат:|         |         |          |          |          |

**Table 3:**

|Выражение: | `true > false` | `false > true` | `true == true` |
|Результат:|                |                |                |

**Table 4:**

|Выражение: | `false == false` | `false != true` |
|Результат:|                  |                 |
