## Докажем, что все в Руби — объект

Известно, что `123.class` возвращает *Integer*, `"blabla".class` возвращает *String*. Но у объекта (Object) существует также метод `is_a?`, который возвращает истину или ложь, если передать определенный параметр в этот метод:

{line-numbers: false}
```ruby
$ irb
> 123.is_a?(Integer)
 => true
```

В примере выше для объекта `123` мы вызвали метод `is_a?` с параметром *Integer*. Метод вернул результат *true* (истина). То есть 123 является типом *Integer* (целое число). Если мы проверим, является ли `123` строкой, то ответ будет «ложь»:

{line-numbers: false}
```ruby
$ irb
> 123.is_a?(String)
 => false
```

Но для строки ответ будет «истина»:

{line-numbers: false}
```ruby
$ irb
> "blabla".is_a?(String)
 => true
```

Кстати, «is_a?» — не какое-то магическое выражение, а «калька» с английского языка. Мы как бы спрашиваем «*Is this object a string?*» (является ли этот объект строкой?).

Выше мы убедились, что 123 — это число, а “blabla” — это строка. Но являются ли число и строка объектом? Давайте проверим:

{line-numbers: false}
```ruby
$ irb
> 123.is_a?(Object)
 => true
> "blabla".is_a?(Object)
 => true
```

Оказывается, что да! Число и строка являются объектами. 123 — это одновременно число и объект. “blabla” — это одновременно строка и объект.

Что такое объект — мы разберем дальше. На этом этапе нет необходимости запоминать метод «is_a?», принцип его работы, как правильно его вызывать и что он возвращает (говорят — «сигнатуру» или «API»). Наверное, стоит в уме держать только `.class` — возможность проверить, какого типа результат выполнения того или иного действия может пригодиться в будущем.
