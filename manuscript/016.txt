## Консольный ниндзя

Новичку на первых порах лучше всего хорошо разобраться с файловым менеджером. Мы бы могли дать курс по консольным командам, но сколько человек бы мы потеряли в бою, если бы нужно было овладеть искусством манипулирования файлов в консоли, прежде чем написать первую программу? Ниже мы разберем основные команды. Не все программисты с опытом с ними знакомы, поэтому запоминать их не стоит, но сделать пометку в книге нужно обязательно. Эти команды могут вам потребоваться через год, два и более лет.

Создать директорию (make directory) «one»:

```
$ mkdir one
```

Создать одну директорию «one», в ней другую «two», и и в ней третью «three». Без флага `p` (path) не обойдешься:

```
$ mkdir -p one/two/three
```

Вывести содержимое файла в вашем терминале (`file.txt` — это имя файла)::

```
$ cat file.txt 
```

Трюк: существует альтернатива команде `cat` (кошка), которая называется `bat` (летучая мышь). На официальном [сайте](https://github.com/sharkdp/bat) говорится, что летучая мышь это кошка с крыльями «A cat with wings». Требуется установить bat перед использованием. Из коробки команда позволяет выводить файлы с подсветкой синтаксиса и номерами строк.

Обычно вывод файла осуществляется другой командой, ведь файл может быть большой. Вывести первые 10 строк на экран:

```
$ head -10 file.txt
```

Вывести последние 10 строк на экран:

```
$ tail -10 file.txt
```

Иногда существует какой-то большой текстовый файл, в который постоянно добавляются данные. И вы хотите выводить на экран обновления без перезапуска команды tail. В этом случае поможет флаг `f` (follow - следовать):

```
$ tail -f file.txt
``` 

Выход из этой команды осуществляется стандартной комбинацией Ctrl+C.

Для переименования файла используется команда `mv` (в файл-менеджере F6), от слова `move`. Для компьютера переименовать и переместить файл это одно и то же. Дело в том, что в таблице размещения файлов (практически в любой стандартной файловой системе), содержатся только структуры с метаданными о файле (имя, размер, атрибуты и т.д.). Содержимое размещено на диске. При переносе или переименовании мы изменяем только таблицу, хотя содержимое остается на том же месте. Именно поэтому перенос больших файлов (гигабайты) занимает доли секунды, если операция выполняется на том же диске. И минуты и часы, когда операция выполняется на разных дисках — ведь нужно «перенести» (на самом деле скопировать и удалить) содержимое:

```
$ mv file1.txt file2.txt # переименовать первый файл во второй
$ cp file1.txt file2.txt # скопировать файл (copy)
$ cp file1.txt my_directory # cкопировать файл в директорию
$ mv file.txt ~ # переместить файл в домашний каталог
$ cp file1.txt .. # скопировать файл в директорию на 1 уровень выше
$ cp file1.txt ../.. # скопировать файл в директорию на 2 уровня выше
```

Примечание: скопировать файл в директорию на 2 уровня выше можно и в файл-менеджере, если указать в качестве назначения директорию `../..`)

```
$ cp {file1.txt,file2.txt} my_dir # скопировать несколько файлов в директорию
```

Примечание: к слову, тут уже у многих т.н. высокомерных программистов, которые любят давать советы, наступает клин. Можете использовать этот вопрос «для проверки» — «а знаешь ли ты какой командой можно скопировать несколько файлов в директорию?»

В Far Manager для копирования нескольких файлов необходимо их сначала выбрать. Это можно сделать с помощью клавиши *Insert* (Ins). Если клавиши *Insert* на вашем компьютере нет (существует только на расширенных клавиатурах), то выбрать можно с помощью Shift + «стрелка вверх» или Shift + «стрелка вниз». После этого для копирования с одной панели на другую нажать F5.

Стоит заметить, что если вы установили [“Oh My Zsh”](https://ohmyz.sh/) вместо bash, то у вас доступна клавиша *Tab*, которая очень помогает набирать имена файлов. Например, вводите `cp {f`, а потом Tab и оболочка предложит вам список файлов, которые можно включить в команду. Ничего вводить с клавиатуры не нужно. Очень полезно, когда имена файлов длинные.

X> ## Упражнение 1
X> Откройте свой терминал. Выведите на экран список всех файлов (`ls -lah`). Создайте каталог с именем `my_directory`. Снова выведите список всех файлов, убедитесь, что каталог существует. Выберите любой файл из текущего каталога и скопируйте этот файл в каталог, который вы только что создали. Используйте файловый менеджер, чтобы убедиться, что вы все сделали правильно.

Поиск файла по имени (команда найдет все файлы и директории с расширением `rb`):

```
$ find . -name '*.rb' 
```

Поиск всех файлов в текущей директории, в имени которых содержится строка `bla`:

```
$ find . -name '*bla*' 
```

Поиск файлов (без директорий) с расширением `rb`:

```
$ find . -name '*.rb' -type f
```

E> ## Имейте это в виду
E>
E> Часто люди делают ошибку и ставят два дефиса `--` вместо одного `-` для команды `find`. Например, параметр с двумя дефисами `--name` или `--type f` неверен. Вы должны использовать **один** дефис с `find`. Однако некоторые другие команды Linux принимают два дефиса. Не запутайтесь!

Как вы могли заметить, существует разные способы поиска файлов в *текущей директории*. Текущая директория обозначается точкой. Двумя точками обозначается директория уровнем выше. Директория двумя уровнями выше обозначается как `../..`. Небольшая справка по разным обозначениям и примеры использования find:

* `.` — текущая директория. Пример команды (ищет все файлы с расширением log в текущей директории): 

          find . -name '*.log'

* `..` — директория уровнем выше. Пример команды (ищет все файлы с расширением log в директории уровнем выше): 

          find .. -name '*.log'

* `../..` — директория двумя уровнями выше. Пример команды (ищет все файлы с расширением log в директории уровнем выше): 

          find ../.. -name '*.log'

* `~` — домашняя (home) директория, т.е. личная директория текущего пользователя.  Пример команды (ищет все файлы с расширением log в домашней директории): 

          find ~ -name '*.log'

* `/` — корневая (root) директория. Пример команды (ищет все файлы с расширением log в корневой директории): 
   
          find / -name '*.log'

X> ## Упражнение 2
X> Попробуйте найти все файлы журналов в корневом каталоге.

В Far Manager можно искать файлы с помощью специального диалога, который можно вызвать комбинацией *Alt+F7*. Визуально этот диалог более наглядный и с ним проще работать. По-умолчанию маска файла задана как *.* (все файлы, по аналогии с *.log — файлы с расширением log). В этом диалоге можно также искать файлы с определенной строкой (например, когда требуется найти все файлы, в которых встречается ваше имя).

Поиск по всем файлам определенной строки (в нашем случае something):

```
$ find . -name '*.rb' -type f | xargs grep something
```

Команда выше делает поиск, а потом перенаправляет результат в команду xargs, которая для каждой полученной строки запускает программу grep с аргументами: `grep something file1.rb`. Не стоит переживать, если эта конструкция непонятна — со временем все встанет на свои места.

Иногда полезно что-то быстро сохранить в файл прямо из консоли. Когда ввод окончен, нужно нажать *Ctrl+D*.

```
$ cat > file.txt
```

E> ## Будьте осторожны
E>
E> Команда `cat > file.txt` затрёт предыдущее содержимое файла.

Добавить в конец файла:

```
$ cat >> file.txt
```

Немного про саму файловую систему. Корневой каталог обозначается как `/`. Есть также такое понятие как «*домашний каталог*» — это личный каталог текущего пользователя. Узнать имя текущего пользователя можно с помощью команды «кто я»:

```
$ whoami
ninja
```

Любопытно, что в [Pry](https://github.com/deivid-rodriguez/pry-byebug) (отладчик/дебаггер и REPL, рассматривается раньше) есть команда `whereami` (где я). Она показывает, где вы находитесь в текущем коде (разбирается далее в книге).

Вывести текущую директорию на экран (PWD — Print Working Directory — напечатать рабочую директорию):

```
$ pwd
/home/ninja
```

Домашний каталог обозначается тильдой `~`. Можно вывести его на экран:

```
$ echo ~
/home/ninja
```

Или совершить другие манипуляции:

```
$ mkdir ~/tmp # создать директорию tmp в домашнем каталоге
$ cp file.txt ~/tmp # скопировать файл в созданную директорию
```

Кстати, создайте директорию ~/tmp — это удобно для хранения временных файлов. Существует системная директория /tmp, но все данные оттуда удаляются после перезапуска компьютера (по-умолчанию).

Удаление файла, будьте осторожны (remove):

```
$ rm file.txt
```

Удаление директории:

```
$ rm -r my_dir
```

Надо заметить, что параметр `r` универсальный для многих команд — он указывает на то, что работа будет производиться с директорией, рекурсивно (recursive).

E> ## Не делайте этого
E>
E> Будьте осторожны с командой “rf”. Существует самая опасная команда, которую вы можете ввести: `rm -rf /`. Эта команда удалит содержимое корневой директории на вашем диске без какого-либо подтверждения. Иногда в сети существуют злые шутники, которые могут попросить вас что-нибудь ввести. Всегда проверяйте, что именно вы вводите.

Выше мы рассмотрели команду копирования, но есть еще одна, менее известная, команда копирования, которая вам может пригодиться: `scp`. Это команда копирует файлы с удаленного сервера на локальный компьютер и обратно. Например, на вашем сайте произошла какая-то ошибка и вы хотите скачать файл с описанием ошибок через SSH-доступ. Это можно сделать с помощью “scp”. Останавливаться подробно пока на этом не будем, при желании вы всегда можете найти справку в Интернете.

На этом тренировка для настоящих ниндзя окончена, время выпить чаю, да съесть ещё этих французских булок.
