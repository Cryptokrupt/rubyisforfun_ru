## Немного про виртуализацию, Docker, основные команды Docker

Т.к. мы затронули тему виртуализации и контейнеров, стоит ознакомиться с основными понятиями. На сегодняшний день существуют три основных подхода к виртуализации.

Первый — запуск операционных систем внутри вашей собственной ОС. Например, у вас установлена ОС Windows и вы хотите запустить ОС Linux не выходя из Windows. В этом случае можно воспользоваться такими решениями как VirtualBox (бесплатно) или VMWare Workstation (работает лучше, но не бесплатно). Таким же образом можно запускать, например, Windows не выходя из Linux.

{width=100%}
![Linux Mint запущен внутри Windows с помощью VMWare Workstation](images/088-windows.png)

Преимущество этого способа — операционные системы «думают», что они запущены на отдельном компьютере и ведут себя точно также, как если бы их установили на другой компьютер. Программы для виртуализации позволяют видеть настоящий графический экран запущенной операционной системы при помощи виртуализации, подключать устройства (например, по USB), проигрывать звук одновременно из двух ОС.

Недостатков у этого способа виртуализации несколько. Во-первых, образы получаются довольно тяжеловесными. Даже Linux с графической подсистемой требует нескольких гигабайт места на диске и как минимум одного гигабайта оперативной памяти для работы. Во-вторых, из-за полной виртуализации и требований памяти сложно запустить несколько работающих контейнеров, операционная система начинает подтормаживать. В-третьих, как правило, отсутствует интерфейс командной строки — невозможно из терминала включать, выключать, останавливать, запускать команды внутри контейнера.

Второй подход к виртуализации — использование инструмента, который называется `vagrant`. Он позволяет не только запускать, но и конфигурировать (`provisioning`) запускаемый контейнер с помощью отдельного файла (`Vagrantfile`). В этом файле можно прописать конкретные шаги, указать начальный образ ОС, задать общую (shared) папку, которая будет доступна, например, и на Windows, и на Linux.

Этот инструмент является более гибким и рассчитан на разработчиков. Вся «стандартная» функциональность по-умолчанию выключена. Например, для того, чтобы «пробросить» звук из контейнера наружу, придется написать отдельный скрипт.

Преимущество инструмента заключается в наличии скриптового синтаксиса (который, кстати, ничто иное как программа на языке руби). У программистов появилась возможность обмениваться небольшими программами в виде Vagrantfile. На основе Vagrantfile каждый раз создается один и тот же, точно такой же, контейнер.

Vagrant является надстройкой над VirtualBox (или VMWare), а поэтому позволяет запускать любые операционные системы внутри контейнера (в т.ч. Windows). Если речь идет про Linux, то программисты предпочитают запускать эту ОС в Vagrant без графической подсистемы. Это экономит память и позволяет запускать несколько контейнеров одновременно.

Иногда Vagrant используется в виде окружения для разработки, т.к. Vagrant позволяет задать т.н. «shared folder» — папку, которая будет доступна внутри контейнера и снаружи. В этом случае запуск программ происходит внутри контейнера, а редактирование исходного кода происходит снаружи. Например, вы можете редактировать файлы в Windows, а запускать программы в Linux.

Представьте, что вы устроились на новую работу программистом, первый день, вам дают новый компьютер и инструкцию. В инструкции написано: 

*Дорогой друг! Добро пожаловать в нашу команду. Мы работаем над проектом Х, это веб-приложение на Ruby on Rails, для того, чтобы ты смог начать разработку, тебе необходимо установить:

* MySQL (займет 1 час)
* Ruby, node.js, rvm, nvm (3 часа)
* Установить redis (20 минут)
* Установить git и задать его параметры (1 час)
* «Склонировать» последнюю версию кода 
* Запустить команды для обновления базы данных*

На каждый пункт — отдельная инструкция. Где и какую версию взять, как поставить, какие параметры указать при установке и так далее. Но более профессиональная команда разработчиков могла бы дать другие инструкции:

*Дорогой друг! Добро пожаловать в нашу команду. Мы работаем над проектом Х, это веб-приложение на Ruby on Rails. Для того, чтобы ты смог начать разработку, тебе достаточно установить Vagrant, «склонировать» этот репозиторий и запустить `vagrant up`. Процесс займет какое-то время, но все произойдет автоматически, а ты пока можешь попить кофе. Когда все будет готово, ты увидишь рабочую программу! Если что-то пойдет не так, то это будет наша проблема, ведь у нас существует единый контейнер, это единый стандарт среды разработки для всех членов команды, и мы поддерживаем этот контейнер в актуальном состоянии.*

Третий способ виртуализации — *Docker*, с которым мы уже немного знакомы. Докер позволяет запускать легковесные контейнеры, которые были созданы специально для виртуализации. Например, образ на основе Linux alpine может занимать всего 5 мегабайт. Следовательно, на одном компьютере можно запустить десятки и даже сотни таких легковесных контейнеров.

При работе с докером полезно отличать контейнер (container) от образа (image). Образ — это какой-то шаблон, как чертёж, класс в программировании. Сам по себе образ не является живым организмом, он просто хранится на диске, в сети (например, в хранилище образов, которое называется Docker Hub). Но контейнер это уже деталь, изготовленная на основе чертежа, это экземпляр класса, объект. Поэтому возможны следующие основные операции:

* с контейнером: создать и запустить (run и start), остановить (stop), удалить (rm), просмотреть список запущенных («ps» — от «process status»)
* с образом (image): удалить (rmi), просмотреть список доступных (images)

Имея в голове представление об образах и контейнерах гораздо проще понять работу с докером. У нас нет цели дать исчерпывающее руководство по этому инструменту, но некоторые команды могут быть полезны на начальном этапе:

* `docker version` — показывает версию докера
* `docker ps` — показывает список запущенных контейнеров (аналогично shell-команде `ps`)
* `docker ps -a` — показать список всех контейнеров
* `docker images` — список образов
* `docker rm container_name` — удалить контейнер по имени
* `docker rm f767ff6ecebf` — удалить контейнер по ID

Запуск контейнера нам уже знаком:

{line-numbers: false}
```shell
```
docker run -it --name xxx -p 4567:4567 ro31337/rubybook-save-the-world
```

Посмотреть справку по команде `run` можно с помощью команды оболочки `docker run --help` (вместо `run` можно ввести любую другую команду докера).

Полезны также следующие команды (они используются как основа для скрипта ниже):

* `docker ps -a -q` — вывести список всех идентификаторов существующих контейнеров
* `docker images -q` — вывести список всех идентификаторов существующих образов

Скрипт, который позволяет остановить все контейнеры, удалить все контейнеры и удалить все образы:

{line-numbers: false}
```
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi $(docker images -q)
```

Скрипт выше можно использовать в случае когда что-то пошло не так, и вы хотите начать с чистого листа.