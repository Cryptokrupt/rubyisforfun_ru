## Дробные числа

Рассмотрим некоторые популярные приведения типов, с которыми мы уже столкнулись. Тот или иной объект может реализовывать один или несколько следующих методов:

* `.to_i` — перевод чего-либо в число (например, строки);
* `.to_s` — перевод чего-либо в строку (например, числа);
* `.to_f` — перевод чего-либо в дробь (например, перевод строки в дробь).

Запустим REPL, чтобы посмотреть, что такое дробь:

{line-numbers: false}
```
$ irb
> 3.14.class
 => Float
```

Мы ввели число `3,14` (обратите внимание — через точку). А тип, который представляет дробь, называется *Float*. Мы также «имеем право» представить любое целое число не только в виде *Integer*, но и в виде *Float*:

{line-numbers: false}
```
$ irb
> 123.class
 => Integer
> 123.0.class
 => Float
```

Так зачем нужен тип Float? Затем же, зачем нужна и сама дробь, — в основном для приблизительных математических расчетов (для более точных есть тип [*BigDecimal*](https://ruby- doc.org/stdlib- 2.5.3/libdoc/bigdecimal/rdoc/BigDecimal.html), альтернативное «более точное» представление дроби, которое работает несколько медленнее, но точнее, чем *Float*). Посчитаем 30%-ный налог на вводимую зарплату:

{caption: "Программа для расчета налога 30%"}
```ruby
puts "Your salary?"
salary = gets.to_i
tax_rate = 0.3
puts "Tax:"
puts salary * tax_rate
```

Запустите эту программу и проверьте, как она работает.
