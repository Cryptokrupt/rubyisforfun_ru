## Блоки и параметры

Тот объект (ниже это объект «24», класс *Integer*), который запускает ваш блок, может передать в ваш блок параметр. Что делать с параметром — зависит уже от вас, т.е. от вашего блока. Параметр в блоке — это обычно какая-то полезная информация. Вы можете использовать этот параметр или игнорировать его. До сих пор мы игнорировали параметр. Это происходило неявно, параметр на самом деле передавался. Давайте теперь сделаем с параметром что-нибудь интересное.

Напишем программу «бабушка». Бабушка каждый месяц будет принимать от нас определенную сумму денег и складывать в свой сундучок (надеемся, что бабушка потом отдаст нам накопленные средства). Программа должна выводить, сколько денег бабушка накопит в течение следующих 24 месяцев.

{caption: "Программа Копилка, версия 1"}
```ruby
sum = 0

24.times do |n|
  sum = sum + 500
  puts "Месяц #{n}, у бабушки в сундуке #{sum}"
end
```

Результат:

{line-numbers: false}
```
Месяц 0, у бабушки в сундуке 500
Месяц 1, у бабушки в сундуке 1000
Месяц 2, у бабушки в сундуке 1500
Месяц 3, у бабушки в сундуке 2000
...
Месяц 21, у бабушки в сундуке 11000
Месяц 22, у бабушки в сундуке 11500
Месяц 23, у бабушки в сундуке 12000
```

Мы получили не совсем предсказуемый результат, хотя в общем-то программа верна. По какой-то причине отсчет начался с нуля! На самом деле все в порядке, за исключением одного момента. То, что отсчет начинается с нуля, ожидаемо. Это описано в документации, и в этом нет ничего плохого. Однако то, как мы назвали переменную, может смутить некоторых опытных программистов.

Дело в том, что для натуральных чисел обычно используют переменные `n`, `m` и т.д. Если речь идет об индексе (а индекс начинается с нуля), используют переменные `i`, `j` и т.д. Нет большой ошибки, если вы назвали переменную неправильно, ведь это не повлияет на результат. Однако у кода есть два читателя — компьютер и человек. Человек — не только вы, но и кто-то другой, и он будет смотреть на ваш код (если вы пишете только для себя, то этот человек — вы в будущем). Поэтому нужно писать как можно более предсказуемый код. Тем более в языке Руби, который исповедует принцип наименьшего сюрприза.

Мы можем переписать нашу программу следующим образом:

{caption: "Программа Копилка, версия 2"}
```
sum = 0

24.times do |i|
  sum = sum + 500
  puts "Месяц #{i}, у бабушки в сундуке #{sum}"
end
```

То есть просто переименовать переменную. Также с практической точки зрения «нулевой месяц» не имеет смысла. Мы же не считаем количество яблок начиная с нуля? Поэтому можно добавить `+1` — и наш вывод примет более человеческий вид:

{caption: "Программа Копилка, версия 3"}
```
sum = 0

24.times do |i|
  sum = sum + 500
  puts "Месяц #{i + 1}, у бабушки в сундуке #{sum}"
end
```

Ради эксперимента давайте представим, что нам досталась не просто бабушка, а очень заботливая бабушка, которая все наши сбережения решила отнести в АО «МММ» (авторы книги настоятельно не рекомендуют относить туда свои сбережения). Посчитаем, сколько денег у нас будет через 24 месяца, если АО «МММ» будет начислять еще 10 % ежемесячно:

{caption: "Программа «Волшебная копилка»"}
```
sum = 0

24.times do |i|
  sum = sum + 500 + sum * 0.1
  puts "Месяц #{i + 1}, у бабушки в сундуке #{sum}"
end
```

В нашу программу мы добавили только `+ sum * 0.1`. Давайте посмотрим на результат:

{line-numbers: false}
```
Месяц 1, у бабушки в сундуке 500.0
Месяц 2, у бабушки в сундуке 1050.0
Месяц 3, у бабушки в сундуке 1655.0
...
Месяц 22, у бабушки в сундуке 35701.37469341988
Месяц 23, у бабушки в сундуке 39771.512162761865
Месяц 24, у бабушки в сундуке 44248.66337903805
```

Другими словами, если мы отдаем бабушке 500 рублей ежемесячно, а она кладет их под 10 % ежемесячно в АО «МММ», к концу 24-го месяца мы будем иметь в сундуке чуть более 44 тысяч рублей.

X> ## Задание 1
X> Известно, что стоимость дома — 500 тысяч долларов. Человек берет дом в рассрочку на 30 лет. Чтобы выплатить сумму за 30 лет, нужно платить 16 666 долларов в год (это легко посчитать, разделив 500 тысяч на 30). Написать программу, которая для каждого года выводит сумму, которую осталось выплатить.
>
X> ## Задание 2
X> Измените программу из предыдущего задания со следующими условиями: человек берет дом не в рассрочку, а в кредит по ставке 4 % годовых на оставшуюся сумму. Для каждого года посчитайте, сколько денег нужно заплатить за этот год за использование кредита.
>
X> ## Задание 3
X> Посчитайте количество денег (total), которые мы заплатим только в виде процентов по кредиту за 30 лет.
