## Руби против ибур

Язык «ибур» это «руби» наоборот. Это экзотический язык программирования, который кроме меня никто не знает. Я его сам только что придумал и я сам не знаю, что он делает. Давайте сравним ибур с руби по трем параметрам, которые я описал выше.

### Поскорее найти работу

Руби - очень популярный язык, легко найти работу. Ибур - никто о нем не знает, работу найти невозможно.

Остальные параметры можно не сравнивать. Другими словами, если вам важно не только программирование в себе (что тоже неплохо), но и возможность заработать в обозримом будущем, то руби - неплохой выбор. Язык довольно популярен. Конечно, существуют и другие популярные языки программирования. Скажем, JavaScript, возможно, более популярен, но давайте сравним JavaScript и руби.

### Выучить что-нибудь несложное и интересное

Руби - principle of a least surprise, что уже довольно неплохо. JavaScript - изначально не создавался с идеей «принципа наименьшего сюрприза». Сложнее, чем руби, так как является полностью асинхронным (пока поверьте мне на слово).

Докажем, что JavaScript не такой уж и простой, как может показаться на первый взгляд. Рассмотрим программу на руби, которая сортирует числа:

{title="Пример: простая программа для сортировки четырех чисел в Ruby", lang=ruby, line-numbers=off}
```ruby
[11, 3, 2, 1].sort()
```

Программа выше должна отсортировать числа 11, 3, 2, 1 в возрастающем порядке (пока не важно, если этот синтаксис вам непонятен, мы еще будем проходить эту тему). Результат работы программы на руби: 1, 2, 3, 11. Без сюрпризов! Но напишем ту же самую программу на JavaScript:

{title="Пример: Неправильная программа для сортировки четырех чисел в JavaScript", lang=javascript, line-numbers=off}
```javascript
[11, 3, 2, 1].sort();
```

Синтаксис в этом случае очень похож и отличается лишь точкой с запятой (semicolon) в конце. Но каков будет результат? Не всегда JavaScript программисты с опытом могут дать правильный ответ, ведь результат работы программы довольно неожиданный: 1, 11, 2, 3. Почему это так - это вопрос уже к истории. Но чтобы отсортировать числа в JavaScript, надо написать:

{title="Пример: правильная программа для сортировки четырех чисел в JavaScript", lang=javascript, line-numbers=off}
```javascript
[11, 3, 2, 1].sort((a, b) => a - b);
```

Если разобраться, то это несложно. Но вопрос в другом. Нужно ли вам на начальном этапе тратить время на такие тонкости? JavaScript вполне востребован, и каждый руби-программист должен знать его на минимальном уровне. Но, признаться, быть full-time JavaScript разработчиком я бы хотел только за очень большие деньги.

### Может пригодится в будущем

К тому же «чтобы также пригодилось в будущем» не очень подходит в случае с JavaScript. Язык очень динамично развивается. Знания полученные 10 лет назад уже не актуальны (в данном случае я говорю про популярные фреймворки - наборы инструментов). В случае с руби фреймворк rails существует уже более 10 лет. Знания, полученные 10 лет назад, до сих пор применимы.

К слову, про применимость знаний стоит сделать отдельное замечание. Знания языков shell-скриптинга до сих пор применимы, через более чем 30 лет мало что изменилось. Знания основ Computer Science - до сих пор применимо, на интервью и не только, эти знания практически не устаревают.

Про применимость какого-либо языка в будущем никто не может дать точных прогнозов. Однако, можно посмотреть на статистику последних лет. На момент написания этой книги компания Microsoft купила за 7.5 миллиардов долларов GitHub, который был написан как раз на языке ruby. Другими словами, язык на сегодняшний день находится в прекрасной форме. Выпускаются обновления, улучшается скорость и синтаксис. А количество доступных библиотек позволяет быстро решить практически любую задачу (в рамках направления, которое называется веб-программирование).
