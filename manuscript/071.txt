## Итерация по хешу

Итерация по хешу используется нечасто: основное назначение хеша — все-таки в добавлении и извлечении конкретного элемента. Но иногда она встречается. Мы уже знаем, что итерация по массиву имеет следующий вид:

{line-numbers: false}
```ruby
arr.each do |element|
  # do something with element
end
```

Итерация по всем парам ключ-значение имеет похожий вид:

{line-numbers: false}
```ruby
hh = {
  soccer_ball: 410,
  tennis_ball: 58,
  golf_ball: 45
}

hh.each do |k, v|
  puts "Вес #{k} равняется #{v}"
end
```

Результат работы программы:

{line-numbers: false}
```
Вес soccer_ball равняется 410
Вес tennis_ball равняется 58
Вес golf_ball равняется 45
```

Переменные `k` и `v` означают `key` (ключ) и `value` (значение) соответственно. Если значение не нужно, то переменную `v` можно опустить, написать с подчеркиванием вначале или вообще заменить на подчеркивание. Это не синтаксис языка, а общепринятые соглашения о наименовании (`naming conventions`), с помощью которых другим программистам будет известно о ваших намерениях:

{line-numbers: false}
```ruby
hh = {
  soccer_ball: 410,
  tennis_ball: 58,
  golf_ball: 45
}

hh.each do |k, _|
  puts "На складе есть #{k}"
end
```

Код выше можно записать немного иначе, если воспользоваться методом `each_key` класса *Hash*.

X> ## Задание
X> Имеются следующие данные:

{line-numbers: false}
```ruby
data = {
  soccer_ball: { name: 'Футбольный мяч', weight: 410, qty: 5 },
  tennis_ball: { name: 'Мяч для тенниса', weight: 58, qty: 10 },
  golf_ball: { name: 'Мяч для гольфа', weight: 45, qty: 15 }
}
```

Написать программу, которая будет выводить на экран:

{line-numbers: false}
```ruby
На складе есть:
Футбольный мяч, вес 410 грамм, количество: 5 шт.
Мяч для тенниса, вес 58 грамм, количество: 10 шт.
Мяч для гольфа, вес 45 грамм, количество: 15 шт.
```
